<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>逍遥很晕</title>
  
  <subtitle>开心了就笑，不开心了就过会再笑~~</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://happybug.top/"/>
  <updated>2019-09-15T13:55:59.166Z</updated>
  <id>http://happybug.top/</id>
  
  <author>
    <name>逍遥很晕</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CSS选择器相关</title>
    <link href="http://happybug.top/2019/09/15/css-selector/"/>
    <id>http://happybug.top/2019/09/15/css-selector/</id>
    <published>2019-09-15T06:50:22.000Z</published>
    <updated>2019-09-15T13:55:59.166Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="css-yin-ru-fang-shi-you-na-xie">css引入方式有哪些？</span><a href="#css-yin-ru-fang-shi-you-na-xie" class="header-anchor">#</a></h2><ul><li>行内样式： <code>&lt;div style=&quot;color: red;&quot;&gt;&lt;/div&gt;</code></li><li>内联样式：<code>&lt;style type=&quot;text/css&quot;&gt;&lt;/style&gt;</code>  </li><li>外部样式：1、 link标签：<code>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;xxx&quot; /&gt;</code> 2、 @import 的方式</li></ul><h2><span id="css-xuan-ze-qi-de-fen-lei">css选择器的分类</span><a href="#css-xuan-ze-qi-de-fen-lei" class="header-anchor">#</a></h2><p>css选择器有这么几个分类:</p><ul><li>基础选择器</li><li>组合选择器</li><li>伪类</li><li>伪元素</li></ul><p>其中基础选择器分为几下几类：</p><ol><li>id选择器: <code>#id</code></li><li>类选择器: <code>.class</code></li><li>标签选择器: <code>div</code></li><li>通用选择器: <code>*</code></li><li>属性选择器: <ul><li><code>[attr]</code> 选中带有指定属性的元素</li><li><code>[attr=value]</code> 选中属性等于value值的元素</li><li><code>[attr~=value]</code> 选中属性中的值以空格为分隔符隔开的列表中的某一项完全匹配到value的元素，比如：[type~=’a’]，可以匹配到<code>&lt;div type=&quot;a&quot;&gt;&lt;/div&gt;</code> \ <code>&lt;div type=&quot;a bc&quot;&gt;&lt;/div&gt;</code> \ <code>&lt;div type=&quot;d a b&quot;&gt;&lt;/div&gt;</code>，但是无法匹配到<code>&lt;div type=&quot;abc&quot;&gt;&lt;/div&gt;</code></li><li><code>[attr|=value]</code> 这个选择器有两个解析：1. 选中属性值完全匹配到value值的元素 2. 选中属性值以’value-‘开头的元素，一般用于语言选择</li><li><code>[attr^=value]</code> 选中属性值以value开头的元素</li><li><code>[attr$=value]</code> 选中属性值以value结尾的元素</li><li><code>[attr*=value]</code> 选中属性值中包含至少一个value的元素</li></ul></li></ol><p>组合选择器分类如下：</p><ol><li>紧邻兄弟选择器+， A+B 选择紧跟在A后面的B选择器，它们拥有共同的父元素，就是A后面的第一个元素且满足B</li><li>一般兄弟选择器~，A~B 选择A后面的B选择器，它们拥有共同的父元素</li><li>子选择器 &gt;， A &gt; B, A选择器内部的B选择器匹配的元素，且B是A的直接子元素</li><li>后代选择器 ‘ ‘ 空格， A B, A内部的所有B，不论层级</li></ol><p>伪类的内容比较多，可以参考<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes#Index_of_standard_pseudo-classes" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes#Index_of_standard_pseudo-classes</a>, 以下举例一些常用的伪类： :hover, :active, :focus, :link, :visited, :not, :checked<br>:first-child,:first-of-type,:nth-child,:nth-of-type,:last-child,:last-of-type,:nth-last-child,:nth-last-of-type</p><p>伪元素的内容也不少，可以参考<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements#Index_of_standard_pseudo-elements" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements#Index_of_standard_pseudo-elements</a><br>按照规范，伪元素是双冒号表示的。例如：::before, ::after, ::selection, ::placeholder, ::first-letter, ::first-line</p><h2><span id="css-xuan-ze-qi-you-xian-ji">css选择器优先级</span><a href="#css-xuan-ze-qi-you-xian-ji" class="header-anchor">#</a></h2><p>!important &gt; id选择器 &gt; 类选择器/属性选择器/伪类 &gt; 标签选择器/伪元素 &gt; 通配符选择器 &gt; 继承 &gt; 浏览器自定义的属性</p><h2><span id="ru-he-que-ding-yi-ge-css-shu-xing-de-you-xian-ji-ni">如何确定一个css属性的优先级呢？</span><a href="#ru-he-que-ding-yi-ge-css-shu-xing-de-you-xian-ji-ni" class="header-anchor">#</a></h2><p>css中哪一个属性值最终作用的目标元素上都是由css选择器优先级决定的，它的计算方式如下:<br>A selector’s specificity is calculated for a given element as follows:</p><ol><li>count the number of ID selectors in the selector (= A) </li><li>count the number of class selectors, attributes selectors, and pseudo-classes in the selector (= B)</li><li>count the number of type selectors and pseudo-elements in the selector (= C)</li><li>ignore the universal selector</li></ol><p>以上步骤大致是这样的：<br>首先有3个变量 A、B、C<br>1、计算出选择器中id选择器的个数，赋值给A<br>2、计算出选择器中class选择器、属性选择器、伪类选择器的个数，赋值给B<br>3、计算出选择器中标签选择器、伪元素选择器的个数，赋值给C<br>4、忽略通配符选择器</p><p>得到A、B、C三个值之后，其实就是把权重分成了A、B、C三个级别，<br>所以优先计算A的权重，当A的权重相等的时候才会去计算B的权重，否则就不需要计算B权重了，以此类推。</p><h2><span id="can-kao">参考</span><a href="#can-kao" class="header-anchor">#</a></h2><p><a href="https://www.w3.org/TR/selectors/#specificity-rules" target="_blank" rel="noopener">w3c关于css优先级的计算</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;css-yin-ru-fang-shi-you-na-xie&quot;&gt;css引入方式有哪些？&lt;/span&gt;&lt;a href=&quot;#css-yin-ru-fang-shi-you-na-xie&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;&lt;u
      
    
    </summary>
    
      <category term="css" scheme="http://happybug.top/categories/css/"/>
    
    
      <category term="css" scheme="http://happybug.top/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>声明提升</title>
    <link href="http://happybug.top/2019/07/21/declare-hoisting/"/>
    <id>http://happybug.top/2019/07/21/declare-hoisting/</id>
    <published>2019-07-21T06:29:11.000Z</published>
    <updated>2019-07-21T06:36:43.388Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="bian-liang-de-sheng-ming-zhou-qi">变量的声明周期</span><a href="#bian-liang-de-sheng-ming-zhou-qi" class="header-anchor">#</a></h2><p>当引擎处理变量的时候，变量的生命周期大致分为一下阶段：</p><ol><li>声明阶段(Declaration phase):在作用域中注册一个变量</li><li>初始化阶段(Initialization phase): 为变量分配内存地址并为作用域中的变量创建绑定，在此步骤中变量使用undefined来初始化</li><li>赋值阶段(Assignment phase): 为初始化的变量赋值</li></ol><p><img src="/images/Untitled-9807c575-8d4b-442f-884d-3f32c8d950f0.png" alt=""></p><h2><span id="bian-liang-sheng-ming-ti-sheng">变量声明提升</span><a href="#bian-liang-sheng-ming-ti-sheng" class="header-anchor">#</a></h2><p>var变量的生命周期：</p><p>对于var变量而言，它的声明与初始化阶段是同时完成的，但是在初始化阶段，给变量赋的值是 undefined</p><p><img src="/images/Untitled-aea48e91-7023-428d-86fd-50b8db377d5e.png" alt=""></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于上面的代码，执行的时候，会输出undefined，并不会报错。原因在于变量的声明提升，在js的编译阶段，引擎会将变量的声明统一提升到作用域的顶部，也就是说，一句 <code>var a = 3;</code> 会被替换成先声明后赋值的2句语句 <code>var a; a=3;</code> ,所以上面的代码等同于：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> a<span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="han-shu-sheng-ming-ti-sheng">函数声明提升</span><a href="#han-shu-sheng-ming-ti-sheng" class="header-anchor">#</a></h2><p>函数声明的生命周期：</p><p><img src="/images/Untitled-7566e819-f83a-480b-a1f3-164c9f0851a6.png" alt=""></p><p>从上图可以看到，函数声明的生命周期的三个过程是一次性完成的，也就是说函数声明提升，会直接提升整个函数体。</p><p>函数声明提升是指对<code>函数声明</code>进行操作的提升。</p><p>我们可以通过两种方式声明函数：</p><p>1、function func(){}</p><p>2、var a = function(){}</p><p>第一种方式就是函数的声明，第二种方式是函数表达式，其实与变量的声明相同。所以接下来我们说的函数声明提升都是指的是第一种形式的函数。</p><p>对于函数声明提升而言，js引擎会把函数声明整体移动到当前作用域的顶部。</p><p>看个🌰：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行上述代码会把函数a打印出来，实际上这段代码等同于：</p><pre class="line-numbers language-javascript"><code class="language-javascript">    <span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再举个🌰：</p><pre class="line-numbers language-javascript"><code class="language-javascript">    <span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出：ƒ a(){}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中，我们的函数a出现在return之后，但是声明提升的过程是发生在编译阶段的，并不是发生在执行阶段的，所以即便是有return，也不会起到其他的作用，该提升的内容依然会进行提升的。</p><p>再看一个🌰：</p><pre class="line-numbers language-javascript"><code class="language-javascript">    <span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出：ƒ a(){}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个🌰的特别之处在于：变量a被声明了2次，并且每次被赋予的值的类型是不同的，一次是变量，一次是函数，那么为什么输出的是函数a呢？原因在于函数的提升的优先级高于变量提升的优先级，且在同名的情况下不会被同名的变量覆盖，但是会被同名的函数覆盖。</p><p>所以下面这个输出的是带有console.log的函数a</p><pre class="line-numbers language-javascript"><code class="language-javascript">    <span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span>        <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出：ƒ ƒ a(){console.log(1)}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="let-const-class-de-zan-shi-xing-si-qu">let、const、class的暂时性死区</span><a href="#let-const-class-de-zan-shi-xing-si-qu" class="header-anchor">#</a></h2><p>let变量的生命周期中，声明、初始化、赋值三个阶段的完全分开的（const class与之相同），从图中可以看到，当进入到一个有let变量的作用域内时，let变量首先会进行声明，在作用域中注册其名称，然后解析器继续解析语句。如果在这个时候，尝试去访问let变量的话，就会报错ReferenceError，因为此时let变量的未被初始化，let变量处于暂时性死区。当解析到let variable;这句时才会进行初始化的操作，并将其初始化成undefined。</p><p><img src="/images/Untitled-57572934-21cf-4c55-b699-1574614a593a.png" alt=""></p><p>举个🌰：</p><pre class="line-numbers language-javascript"><code class="language-javascript">    <span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> a<span class="token punctuation">;</span>        a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 报错：Uncaught ReferenceError: Cannot access 'a' before initialization</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="zong-jie">总结</span><a href="#zong-jie" class="header-anchor">#</a></h2><p>1、var变量声明提升会在一开始进行声明、初始化成undefined两步操作</p><p>2、函数的声明提升会将整个函数体进行提升（更精确的说法是：函数声明提升会在一开始就进行声明、初始化、赋值等操作）</p><p>3、函数声明的优先级要搞与变量声明的优先级，且不会被变量声明所覆盖，但是会被同名的函数声明覆盖</p><p>4、let、const、class等变量的暂时性死区是因为在声明、初始化、赋值操作都是分开的，声明之后并没有立即进行初始化操作，而是等待代码执行到声明语句的位置再进行初始化操作。</p><p>参考：</p><ul><li>JS 变量生命周期：为什么 let 没有被提升：<a href="https://juejin.im/post/5d2fb820e51d454f723025bb" target="_blank" rel="noopener">https://juejin.im/post/5d2fb820e51d454f723025bb</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;bian-liang-de-sheng-ming-zhou-qi&quot;&gt;变量的声明周期&lt;/span&gt;&lt;a href=&quot;#bian-liang-de-sheng-ming-zhou-qi&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;&lt;p
      
    
    </summary>
    
      <category term="javascript" scheme="http://happybug.top/categories/javascript/"/>
    
    
      <category term="基础" scheme="http://happybug.top/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="声明提升" scheme="http://happybug.top/tags/%E5%A3%B0%E6%98%8E%E6%8F%90%E5%8D%87/"/>
    
  </entry>
  
  <entry>
    <title>call-apply-bind</title>
    <link href="http://happybug.top/2019/07/19/call-apply-bind/"/>
    <id>http://happybug.top/2019/07/19/call-apply-bind/</id>
    <published>2019-07-19T02:58:31.000Z</published>
    <updated>2019-07-19T03:51:56.308Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="call-apply-bind">call、apply、bind</span><a href="#call-apply-bind" class="header-anchor">#</a></h1><p>js中常用call、apply、bind来改变this的指向，接下来我们先来看下3者之间的区别，然后再分别来模拟实现以下这三个方法。</p><h2><span id="qu-bie">区别</span><a href="#qu-bie" class="header-anchor">#</a></h2><ul><li>bind 接收多个参数，第一个参数表示this需要指向的对象，返回的是一个函数，调用这个函数会得到执行该函数的结果</li><li>call、apply与bind不同，call、apply是直接执行该函数，直接就可以得到执行结果</li><li>call与apply的区别是：call接收多个参数，apply后面接收的是一个数组参数</li></ul><h2><span id="shi-xian">实现</span><a href="#shi-xian" class="header-anchor">#</a></h2><p>我们事先先准备</p><pre class="line-numbers language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'michael'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span>age<span class="token punctuation">,</span> sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="call-fang-fa">Call方法：</span><a href="#call-fang-fa" class="header-anchor">#</a></h3><p>直接调用原生方法：func.call(obj, 12, ‘female’)</p><p>自行实现一个Call方法：</p><pre class="line-numbers language-javascript"><code class="language-javascript">    Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>newCall <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token operator">...</span>params<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token operator">**</span>context<span class="token punctuation">.</span>fn<span class="token operator">**</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> result <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">delete</span> context<span class="token punctuation">.</span>fn<span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    func<span class="token punctuation">.</span><span class="token function">newCall</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">'female'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在newCall方法中第一个参数是context，相当于我们传入的obj对象，这个时候我们在context对象上声明了一个属性fn，并将这个属性指向了this，这是为什么呢？</p><p>这里this对应的就是我们调用的函数，其实就是func，也就是说我们在obj上声明了一个fn的函数，这个函数和func是相等的，那么其实此时obj的结构就变成了：</p><pre class="line-numbers language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'michael'</span><span class="token punctuation">,</span>      fn<span class="token punctuation">:</span> func<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后此时我们执行context.fn的时候，fn内部的this就执行了context，也就是obj，在执行完之后为了确保原函数不被污染，我们要从context上移除fn。</p><p>这就是一个简单的模拟call的执行过程。其中有几点小问题：</p><ol><li>没有兼容context没有传值的情况</li><li>没有兼容context上已经有fn属性的情况</li></ol><p>所以稍加修改一下：</p><pre class="line-numbers language-javascript"><code class="language-javascript">    Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>newCall <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token operator">...</span>params<span class="token punctuation">)</span> <span class="token punctuation">{</span>        context <span class="token operator">=</span> context <span class="token operator">||</span> window<span class="token punctuation">;</span>        <span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'fn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">**</span>context<span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token operator">**</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> result <span class="token operator">=</span> context<span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">...</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">delete</span> context<span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>apply的实现与call的实现方式基本类似，只需要专注一下参数的形式即可。</p><h2><span id="bind-fang-fa">bind方法：</span><a href="#bind-fang-fa" class="header-anchor">#</a></h2><p>bind方法的特点是返回的是一个待执行的函数</p><pre class="line-numbers language-javascript"><code class="language-javascript">    Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>bind <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token operator">...</span>params<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> func <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>            func<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> params<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;call-apply-bind&quot;&gt;call、apply、bind&lt;/span&gt;&lt;a href=&quot;#call-apply-bind&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;js中常用call、apply、bind来改变th
      
    
    </summary>
    
      <category term="javascript" scheme="http://happybug.top/categories/javascript/"/>
    
    
      <category term="this" scheme="http://happybug.top/tags/this/"/>
    
  </entry>
  
  <entry>
    <title>BFC</title>
    <link href="http://happybug.top/2019/06/04/BFC/"/>
    <id>http://happybug.top/2019/06/04/BFC/</id>
    <published>2019-06-04T07:07:45.000Z</published>
    <updated>2019-06-04T07:09:24.573Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="bfc">BFC</span><a href="#bfc" class="header-anchor">#</a></h1><h2><span id="shi-me-shi-bfc">什么是BFC？</span><a href="#shi-me-shi-bfc" class="header-anchor">#</a></h2><p>BFC(Block Formatting Context) 块级格式化上下文，是W3C CSS 2.1规范中的一个概念，它决定了元素如何对其内容进行定位，以及与其他元素的关系和相互作用。BFC中的内容不会影响到其外部的内容，类似于一个BFC就是一个独立的行政单位，也就是说BFC就是一个作用范围，可以把它理解成是一个独立的容器，容器内的元素不会在布局上影响到外面的元素，并且BFC具有普通容器所没有的一些特性。</p><h2><span id="zen-yang-hong-fa-bfc">怎样触发BFC？</span><a href="#zen-yang-hong-fa-bfc" class="header-anchor">#</a></h2><ol><li>根元素</li><li>float属性值不为none</li><li>overflow属性值不为visible</li><li>position属性值absolute、fixed</li><li>display属性：inline-block、table、table-row、table-row-group、table-header-group、table-cell、table-caption、table-header-footer-group、inline-block、flow-root、flex\inline-flex、grid\inline-grid</li><li>column-count或column-width不为auto</li><li>column-span的属性为all的元素</li></ol><blockquote><p>1、外边距折叠(Margin collapsing) 也只会发生在属于同一BFC的块级元素之间。<br>2、浮动定位和清除浮动时只会应用于同一个BFC内的元素。<br>3、浮动不会影响其他BFC中元素的布局，而清除浮动只能清除同一BFC中在它前面的元素的浮动。</p></blockquote><h2><span id="te-dian">特点</span><a href="#te-dian" class="header-anchor">#</a></h2><ol><li>BFC垂直方向边距重叠(margin-collapsing)</li><li>BFC区域不会与浮动元素重叠(经典的左右两栏布局)</li><li>计算BFC高度的时候，浮动子元素也会参与计算</li><li>BFC就是一个独立的容器</li></ol><h2><span id="shi-ti">试题</span><a href="#shi-ti" class="header-anchor">#</a></h2><pre><code>&lt;body&gt;    &lt;div id=&quot;div1&quot; style=&quot;margin: 10px;&quot;&gt;&lt;/div&gt;    &lt;div id=&quot;div2&quot; style=&quot;margin: 20px;&quot;&gt;&lt;/div&gt;&lt;body&gt;</code></pre><p>div1 与 div2 之间的间距是多少？为什么？</p><p>答：div1与div2之间的间距是20px，因为在BFC中触发了margin-collapsing，在这种情况下取较大的margin值。</p><pre><code>&lt;body&gt;    &lt;div id=&quot;div&quot; style=&quot;margin: 10px;&quot;&gt;&lt;/div&gt;    &lt;span id=&quot;span&quot; style=&quot;margin: 20px;&quot;&gt;&lt;/span&gt;&lt;body&gt;</code></pre><p>div 与 span 之间的间距是多少？为什么？</p><p>答：div1与div2之间的间距是10px，因为对于span来说padding-top\padding-bottom\margin-top\margin-bottom都不起作用</p><h2><span id="can-kao">参考</span><a href="#can-kao" class="header-anchor">#</a></h2><p>块格式化上下文：<a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context</a></p><p>BFC 深入理解, 什么是BFC ?：<a href="https://juejin.im/post/5b724d5051882561131aaa52" target="_blank" rel="noopener">https://juejin.im/post/5b724d5051882561131aaa52</a></p><p>10 分钟理解 BFC 原理：<a href="https://zhuanlan.zhihu.com/p/25321647" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/25321647</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;bfc&quot;&gt;BFC&lt;/span&gt;&lt;a href=&quot;#bfc&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;&lt;h2&gt;&lt;span id=&quot;shi-me-shi-bfc&quot;&gt;什么是BFC？&lt;/span&gt;&lt;a href=&quot;#shi-me-shi
      
    
    </summary>
    
      <category term="CSS" scheme="http://happybug.top/categories/CSS/"/>
    
    
      <category term="BFC" scheme="http://happybug.top/tags/BFC/"/>
    
  </entry>
  
  <entry>
    <title>for-of 中为什么可以做异步回调</title>
    <link href="http://happybug.top/2019/06/04/for-of/"/>
    <id>http://happybug.top/2019/06/04/for-of/</id>
    <published>2019-06-04T07:00:55.000Z</published>
    <updated>2019-06-04T07:07:30.158Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="for-of-zhong-wei-shi-me-ke-yi-zuo-yi-bu-hui-diao">for-of 中为什么可以做异步回调</span><a href="#for-of-zhong-wei-shi-me-ke-yi-zuo-yi-bu-hui-diao" class="header-anchor">#</a></h1><h1><span id="iterator">Iterator</span><a href="#iterator" class="header-anchor">#</a></h1><p><code>**可迭代协议**</code>：允许js对象去定义它们的迭代行为。为了变成可迭代对象，一个对象必须实现@@iterator 方法，意思是这个对象或者对象的原型上必须要有一个Symbol.iterator的属性</p><p><code>**迭代器协议**</code>：实现Iterator的方式：必须要有一个next方法，并且该方法返回一个形如 <code>{value: xx, done: false }</code> 的对象，当迭代器的迭代次数超过了可迭代次数时done为true，value的值可以别省略。</p><p>Iterator是一种接口，为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署Iterator接口，就可以完成遍历操作。Iterator本身是符合迭代器协议的。</p><p>Iterator的作用主要有三个：</p><ol><li>为各种数据结构，提供统一、简洁的访问接口</li><li>使数据结构的成员能够按照某种次序排列</li><li>为ES6中的for…of命令提供接口，供其消费(解构赋值和扩展运算符中也会用到Iterator：[…arr])</li></ol><p>模拟实现一个简单的Iterator</p><pre><code>function iteratorMaker(arr) {    let nextIndex = 0;    return function() {        return nextIndex &lt; arr.length            ? {value: arr[nextIndex], done: false}            : {value: undefined, done: true};    }}</code></pre><p>在原生js中，String、Array、TypedArray、Map、Set、Arguments、NodeList对象都有默认的Iterator实现（object对象默认没有实现Iterator，主要是因为默认无法确定遍历的顺序），他们是通过实现Symbol.iterator属性实现的。如果我们想某个对象拥有自定义的Iterator属性，可以通过定义这个对象的Symbol.iterator属性：</p><pre><code>const obj = {    [Symbol.iterator]: function()         return {            next: function() {                return {                    value: 1,                    done: true,                }            }        }    }}</code></pre><h3><span id="bian-li-qi-dui-xiang-de-return-throw-fang-fa">遍历器对象的return()、throw()方法</span><a href="#bian-li-qi-dui-xiang-de-return-throw-fang-fa" class="header-anchor">#</a></h3><p>遍历器中除了具有next方法之外，还可以具有return方法和throw方法。</p><p><strong>return方法</strong>：当你的遍历器对象在执行过程中提前退出时(通常是因为出错或者是有break语句)，就会调用return方法，如果一个对象在完成遍历前，需要清理或释放资源，就可以部署return方法。return方法必须返回一个对象。</p><pre><code>function readLinesSync(file) {    return {        [Symbol.iterator]() {            return {                next() {                    return {done: false, value: 1};                },                return() {                    file.close();                    return { done: ture}                }            }        }    }}</code></pre><p>throw方法主要配合Generator函数使用，一般的遍历器对象用不到这个方法。</p><h2><span id="generator">Generator</span><a href="#generator" class="header-anchor">#</a></h2><p>语法：</p><pre><code>function* generator() {    var a = &#39;hello&#39;;    yield a;    yield &#39;world&#39;;}var a = generator();a.next(); // { value: &#39;hello&#39;, done: false}a.next(); // { value: &#39;world&#39;, done: false}a.next(); // { value: undefined, done: true}</code></pre><p>在调用generator的时候，其函数体并不立即执行，而是会返回一个遍历器iterator对象，当你执行遍历器对象的next方法的时候，才会真正执行generator方法体内部的内容。</p><p>当执行next的方法的时候，在函数体内遇到yield的时候，函数体将停止执行并将yield后的结果值返回出来(也就是next的执行结果，形如：{value:xxx,done: false})，直到下一个next方法被调用时才会从上次停止的位置继续向下执行。</p><blockquote><p>yield表达式本身没有返回值，但是next方法可以带一个参数，这个参数会被当做上一个yield表达式的返回值。这里需要注意的是第一次调用next方法时，传入的参数是无效的，因为它之前并没有yield方法。</p></blockquote><p>举个栗子🌰：</p><pre><code>function* foo(x) {  console.log(&#39;第一个:&#39;, &#39; x:&#39;, x);  var y = 2 * (yield (x + 1));  console.log(&#39;第二个:&#39;, &#39; x:&#39;, x , &#39; y:&#39;, y);  var z = yield (y / 3);  console.log(&#39;第三个:&#39;, &#39; x:&#39;, x, &#39; y:&#39;, y, &#39; z:&#39;, z);  return (x + y + z);}var a = foo(5); // 返回一个generator对象a.next(10);// console.log输出：第一个:  x: 5，因为这是第一个执行的next方法，它之前并没有yield语句// 返回的值为：{value: 6, done: false}a.next(11);// console.log输出：第二个:  x: 5  y: 22，11被当成上一个yield表达式的结果，即：var y = 2 * 11// 返回的值为：{value: 7.333333333333333, done: false}a.next(12);// console.log输出：第三个:  x: 5  y: 22  z: 12，道理同上// 返回的值为：{value: 39, done: true}a.next(); // {value: undefined, done: true}</code></pre><p>Generator的其他内容强烈建议阅读：<a href="http://es6.ruanyifeng.com/#docs/generator" target="_blank" rel="noopener">阮一峰的Generator 函数的语法</a>，里面内容很多。</p><h1><span id="for-of">for-of</span><a href="#for-of" class="header-anchor">#</a></h1><p>在ES6中，js借鉴C++、Java等语言，引入了for…of循环，作为便利所有数据结构的统一方法。一个数据结构只要部署了Symbol.iterator属性，就被视为具有Iterator接口，就可以使用for…of循环进行遍历，也就是说for…of循环内部调用的是数据结构的Symbol.iterator方法，这就为我们在for…of内进行异步调用提供了可能。</p><p>for-of方法可以自动遍历Generator函数运行时生成的Iterator对象，且此时不在需要next方法。</p><h1><span id="yu-for-in-qu-bie">与for-in区别</span><a href="#yu-for-in-qu-bie" class="header-anchor">#</a></h1><p>for…in只能获取键名，for…of可以获取键值 </p><p>let arr = [1,2,3]; <a href="http://arr.foo" target="_blank" rel="noopener">arr.foo</a> = ‘hello’; for…in 循环arr的结果：0,1,2,hello，for…of循环arr的结果：1,2,3。可以看出for…of循环数组只会遍历有数字索引的属性。</p><p>for…of支持异步调用</p><p>for…in 循环会循环原型链上的键</p><p>参考：</p><p>迭代协议：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols</a></p><p>Generator 函数的语法：<a href="http://es6.ruanyifeng.com/#docs/iterator" target="_blank" rel="noopener">http://es6.ruanyifeng.com/#docs/iterator</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;for-of-zhong-wei-shi-me-ke-yi-zuo-yi-bu-hui-diao&quot;&gt;for-of 中为什么可以做异步回调&lt;/span&gt;&lt;a href=&quot;#for-of-zhong-wei-shi-me-ke-yi-zuo-yi-bu-h
      
    
    </summary>
    
      <category term="javascript" scheme="http://happybug.top/categories/javascript/"/>
    
    
      <category term="for-of" scheme="http://happybug.top/tags/for-of/"/>
    
      <category term="javascript" scheme="http://happybug.top/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>JS中的模块化</title>
    <link href="http://happybug.top/2019/05/20/module/"/>
    <id>http://happybug.top/2019/05/20/module/</id>
    <published>2019-05-20T06:24:15.000Z</published>
    <updated>2019-05-20T06:34:43.337Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="mo-kuai-hua">模块化</span><a href="#mo-kuai-hua" class="header-anchor">#</a></h1><h1><span id="1-wei-shi-me-hui-chu-xian-mo-kuai-hua">1、为什么会出现模块化</span><a href="#1-wei-shi-me-hui-chu-xian-mo-kuai-hua" class="header-anchor">#</a></h1><p>在古老的还没有模块化的年代(其实也没几年)开发前端页面的时候一个html里面一个js文件搞定所有的功能，好一点的程序员可能会进行文件的划分，不同的文件内做不同的功能，但是这样依然会带来一些问题，比如：<strong>全局变量的污染、没有明显的命名空间、代码维护性低</strong>等等问题，虽然之后出现IIFE(立即执行函数)的方式在一定程度上解决了全局变量污染的问题，但是依然无法满足我们对于模块化或者命名空间的需求。</p><p>所以js模块化在之后的发展过程中依次出现了</p><ol><li>commonjs</li><li>amd</li><li>cmd</li><li>es6模块化</li></ol><h1><span id="2-mo-kuai-hua-de-fa-zhan-li-cheng">2、模块化的发展历程</span><a href="#2-mo-kuai-hua-de-fa-zhan-li-cheng" class="header-anchor">#</a></h1><h2><span id="2-1-wu-mo-kuai-hua">2.1、无模块化</span><a href="#2-1-wu-mo-kuai-hua" class="header-anchor">#</a></h2><p>简单的script链接的堆叠(有时需要保证链接的顺序)，在不同的文件内做不同的功能，在这种模式下出现全局变量污染等问题，有时你甚至不知道你同事写的代码中用到的变量都是从哪里来的，开发体验非常差。</p><h2><span id="2-2-commonjs-gui-fan-zhu-yao-gua-yong-yu-fei-liu-lan-qi-duan">2.2、CommonJS规范(主要适用于非浏览器端)</span><a href="#2-2-commonjs-gui-fan-zhu-yao-gua-yong-yu-fei-liu-lan-qi-duan" class="header-anchor">#</a></h2><p>CommonJS规范推出的时候主要的应用场景并不是浏览器端，你可以查看维基百科中<a href="https://en.wikipedia.org/wiki/CommonJS" target="_blank" rel="noopener">CommonJS</a>的介绍：</p><blockquote><p>CommonJS is a project with the goal to establish conventions on module ecosystem for JavaScript outside of the web browser.</p></blockquote><p>基于非浏览器(主要是node内)运行的特性，commonjs被设计成<strong>同步</strong>加载模块的方式。</p><p>Commonjs作为规范，有各种各样的实现，其中与前端密切相关的就是Nodejs中 Module的设计。</p><h3><span id="nodejs-module">NodeJs   Module</span><a href="#nodejs-module" class="header-anchor">#</a></h3><p>在nodejs module中，每个文件都被当做一个单独的模块，当node模块系统解析某个文件的时候，会自动在文件内容外部包裹一段代码，如下：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>exports<span class="token punctuation">,</span> require<span class="token punctuation">,</span> module<span class="token punctuation">,</span> __filename<span class="token punctuation">,</span> __dirname<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>具体代码可以查看nodejs中有关commonjs loader的代码：<a href="https://github.com/nodejs/node/blob/master/lib/internal/modules/cjs/loader.js#L127" target="_blank" rel="noopener">loader</a>, 在127行代码中就引用了Module.wrapper对script进行包装。</p><blockquote><p>exports: 导出对象<br>require: 引入其他模块<br>module: 模块的引用<br><strong>filename: 绝对文件名</strong>dirname:  文件的绝对路径</p></blockquote><p>所以其实commonjs是包裹了你的代码并将你的代码的export绑定到了mudule.exports 或是exports内。同时上述方法也解释了为什么node中的文件默认会有require、exports、module、<strong>filename、</strong>dirname等变量。</p><h2><span id="2-3-amd-gui-fan-asynchronous-module-definition">2.3、AMD规范(Asynchronous Module Definition)</span><a href="#2-3-amd-gui-fan-asynchronous-module-definition" class="header-anchor">#</a></h2><p>由于CommonJS是采用同步的方式，所以它并不适用于浏览器端，因为浏览器端都是从远程服务器上去加载js脚本的，这个时候如果采用同步的方式浏览器将会卡主，体验极差。所以为了满足浏览器端的模块化开发的需求，就出现了AMD，而requirejs就是对AMD的一种实现。</p><p>在requirejs中主要有两个核心内容：define 、require，一个用来定义模块，一个用来引用模块。接下来我们来看一个简单的例子：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 对requirejs进行基础配置</span>requirejs<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  baseUrl<span class="token punctuation">:</span> <span class="token string">'lib'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 规定文件的下载位置</span>  paths<span class="token punctuation">:</span> <span class="token punctuation">{</span>    app<span class="token punctuation">:</span> <span class="token string">'./app'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 规定某个模块的路径位置</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 定义一个app模块，它依赖module1模块</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">'app'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'module1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>module1<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span>module1<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 使用app模块进行业务开发，当app模块被加载完毕并执行后，才会执行后面的回调函数</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'app'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 进行业务逻辑</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>requirejs是<strong>依赖前置</strong>的，也就是说当你的回调函数factory执行之前，你依赖的所有文件(包括代码中require进来的)都已经被执行了。</p><h2><span id="2-4-cmd-gui-fan-common-module-definition">2.4、CMD规范(Common Module Definition)</span><a href="#2-4-cmd-gui-fan-common-module-definition" class="header-anchor">#</a></h2><p>CMD要解决的问题和AMD是一致的，只不过在模块的定义与模块运行的方式上有所差异。CMD规范主要思想是<strong>依赖就近</strong>原则，Seajs是CMD的一种比较流行的实现方式。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// module.js</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>require<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> module<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> $ <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'jquery'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>seajs<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'module'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 业务逻辑</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从写法上看，Seajs与requirejs的不同：</p><ol><li>define的写法的不同，主要体现在factory回调函数上，seajs中的factory中的参数是固定的:require、exports、mdule，当然在语法上seajs也支持requirejs一样的语法，但是并不建议使用。</li><li>seajs中是依赖就近的，所以你只需要在你需要用到某个模块的时候书写 require(‘xxx’) 就可以引入该模块，这是与requirejs的主要区别。</li></ol><p>实际上CMD的写法和Commonjs十分相似。</p><h2><span id="2-5-umd">2.5、UMD</span><a href="#2-5-umd" class="header-anchor">#</a></h2><p>随之模块化的发展，amd和cmd在前端中的使用越来越多，为了同时兼容AMD、CMD、CommonJS以及没有模块化等情况，我们的前辈们发明了UMD模式，代码如下：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> define <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">&amp;&amp;</span> define<span class="token punctuation">.</span>amd<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// AMD</span>    <span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'jquery'</span><span class="token punctuation">,</span> <span class="token string">'lodash'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> factory<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> exports <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// commonjs cmd</span>    module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'jquery'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'lodash'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 浏览器全局变量(root 即 window)</span>    root<span class="token punctuation">.</span>xxx <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>jQuery<span class="token punctuation">,</span> root<span class="token punctuation">.</span>_<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>$<span class="token punctuation">,</span> _<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 参考：<a href="https://75team.com/post/%E8%AF%91%E7%A5%9E%E9%A9%AC%E6%98%AFamd-commonjs-umd.html" target="_blank" rel="noopener">https://75team.com/post/译神马是amd-commonjs-umd.html</a></p><h2><span id="2-6-es6-module">2.6、ES6 Module</span><a href="#2-6-es6-module" class="header-anchor">#</a></h2><p>长期以来，JS中并没有原生的模块系统，因此在ES6中引入的原生Module的概念，但是到目前为止各大浏览器并没有实现这个规范。</p><p>ES6 模块的设计思想是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。CommonJS 和 AMD 模块，都只能在运行时确定这些东西。比如，CommonJS 模块就是对象，输入时必须查找对象属性。</p><p>其实我们现在平时开发中已经在大量使用了ES6 Module了：import export就是ES6 Module的两大特性。如果想要深入了解ES6 Module的话，推荐阅读<a href="http://es6.ruanyifeng.com/#docs/module" target="_blank" rel="noopener">阮一峰老师的博客</a>，讲解的非常细致。</p><h1><span id="3-qi-ta">3、其他</span><a href="#3-qi-ta" class="header-anchor">#</a></h1><h3><span id="commonjs-zhong-exports-he-module-exports-de-lian-xi-yu-qu-bie">CommonJs中 exports 和 module.exports 的联系与区别</span><a href="#commonjs-zhong-exports-he-module-exports-de-lian-xi-yu-qu-bie" class="header-anchor">#</a></h3><p>在CommonJS中exports实际上就是module.exports的引用，但是当你像这样写的话：</p><pre class="line-numbers language-javascript"><code class="language-javascript">exports <span class="token operator">=</span> <span class="token punctuation">{</span>  a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这时exports被重新赋值，此时exports就不是module.exports的引用了，所以现在exports !== module.exports.</p><p>所以在非必要情况下不建议这种写法。</p><h3><span id="requirejs-he-seajs-de-zhi-xing-dui-bi">requireJs 和 seajs的执行对比</span><a href="#requirejs-he-seajs-de-zhi-xing-dui-bi" class="header-anchor">#</a></h3><p>先看下requirejs与seajs的区别：</p><p><img src="/images/modulecompare.png" alt=""></p><p>区别截图来自：<a href="https://www.cnblogs.com/zhangruiqi/p/7538920.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhangruiqi/p/7538920.html</a></p><p>关于执行的对比：</p><p>两者都是先异步加载所有模块。</p><p>requirejs 依赖前置，在模块加载完毕之后就执行该模块，在所有模块加载完毕后会进入到factory回调函数中，执行主逻辑。</p><p>seajs 依赖就近，会先加载所有模块，但是不会执行，在所有模块加载完毕之后会进入到factory回调函数中，当遇到对应的require方法时才会去执行对应的模块，这样模块的执行和顺序和书写顺序是完全一致的。</p><h3><span id="commonjs-yu-es6-module-qu-bie">CommonJS 与 ES6 Module区别</span><a href="#commonjs-yu-es6-module-qu-bie" class="header-anchor">#</a></h3><p>如果你看过上面提到的<a href="http://es6.ruanyifeng.com/#docs/module" target="_blank" rel="noopener">阮一峰老师的博客</a>的话，可以直接忽略下面的内容。</p><p>(1) CommonJS模块的输出是一个值的拷贝，ES6 Module 输出的是值的引用。</p><ul><li>commonjs输出的值是一个拷贝，也就是说，一旦输出一个值，模块内部的变化将不会影响输出的值。</li><li>ES6 Module是值的的引用，它是动态引用，并且不会缓存值，模块里面的变量绑定其所在的模块。</li></ul><p>(2) CommonJS是运行时加载，ES6 Module是编译时输出接口</p><ul><li>运行时加载: CommonJS 模块就是对象；即在输入时是先加载整个模块，生成一个对象，然后再从这个对象上面读取方法，这种加载称为“运行时加载”。</li><li>编译时加载: ES6 模块不是对象，而是通过 <code>export</code> 命令显式指定输出的代码，<code>import</code>时采用静态命令的形式。即在<code>import</code>时可以指定加载某个输出值，而不是加载整个模块，这种加载称为“编译时加载”。</li></ul><p>CommonJS 加载的是一个对象（即<code>module.exports</code>属性），该对象只有在脚本运行完才会生成。而 ES6 模块不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成。</p><p>参考：</p><p>这一次，我要弄懂javascript的模块化：<a href="https://juejin.im/post/5b4420e7f265da0f4b7a7b27" target="_blank" rel="noopener">https://juejin.im/post/5b4420e7f265da0f4b7a7b27</a></p><p>阮一峰博客： <a href="http://es6.ruanyifeng.com/#docs/module" target="_blank" rel="noopener">http://es6.ruanyifeng.com/#docs/module</a></p><p>RequireJS 与 SeaJS 的异同：<a href="https://www.cnblogs.com/zhangruiqi/p/7538920.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhangruiqi/p/7538920.html</a></p><p>深入浅出 Nodejs（ 二 ）：Nodejs 文件模块机制：<a href="https://cloud.tencent.com/developer/article/1005768" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1005768</a></p><p>深入浅出 Node.js（三）：深入 Node.js 的模块机制：<a href="https://www.infoq.cn/article/nodejs-module-mechanism" target="_blank" rel="noopener">https://www.infoq.cn/article/nodejs-module-mechanism</a></p><p>深入浅出 Nodejs（四）：Nodejs 异步 I/O 机制：<a href="https://cloud.tencent.com/developer/article/1005792" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1005792</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;mo-kuai-hua&quot;&gt;模块化&lt;/span&gt;&lt;a href=&quot;#mo-kuai-hua&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;&lt;h1&gt;&lt;span id=&quot;1-wei-shi-me-hui-chu-xian-mo-kuai-
      
    
    </summary>
    
      <category term="模块化" scheme="http://happybug.top/categories/%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
    
      <category term="模块化" scheme="http://happybug.top/tags/%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>unbuntu下安装mysql</title>
    <link href="http://happybug.top/2019/04/27/mysql/"/>
    <id>http://happybug.top/2019/04/27/mysql/</id>
    <published>2019-04-27T12:33:55.000Z</published>
    <updated>2019-04-27T13:03:05.828Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="jin-ru-fu-wu-qi-zhi-xing-yi-xia-ming-ling">进入服务器执行以下命令</span><a href="#jin-ru-fu-wu-qi-zhi-xing-yi-xia-ming-ling" class="header-anchor">#</a></h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ssh</span> root@xxx.xxx.xxx.xxx<span class="token function">sudo</span> <span class="token function">apt-get</span> update<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> mysql-server <span class="token comment" spellcheck="true"># 这里安装的时候回提示你设置数据库密码(一个很明显的界面)，输入密码并确认即可</span><span class="token function">sudo</span> <span class="token function">apt-get</span> isntall mysql-client<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libmysqlclient-dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上就安装完成了mysql，接下来你可以检查以下是否安装成功：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">netstat</span> -tap <span class="token operator">|</span> <span class="token function">grep</span> mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这条命令执行后，如果安装成功之后，会看到有mysql的socket处于 listen 状态，表示安装成功</p><p>此时，可以输入命令 <code>mysql -u root -p</code> 登录mysql，过程中会提示输入密码，正常输入即可。</p><h1><span id="shi-yong-ke-shi-hua-gong-ju-lian-jie-shu-ju-ku">使用可视化工具连接数据库</span><a href="#shi-yong-ke-shi-hua-gong-ju-lian-jie-shu-ju-ku" class="header-anchor">#</a></h1><p>无论你使用什么工具，可能在一开始的时候都无法连接上数据库，这时可以检查一下内容：</p><blockquote><ol><li>检查下阿里云或者防火墙3306端口是否开启</li><li>注释掉 <code>/etc/mysql/mysql.conf.d/mysqld.cnf</code> 中的 <code>bind-address = 127.0.0.1</code>  这一行，这样所有ip的电脑都可以远程访问。 如果你想指定ip的机器才能远程访问的话，可以将127.0.0.1 换成 对应的机器ip。<br>修改完成之后，执行命令 <code>service mysql restart</code> 重启mysql。</li><li>赋予账号远程登录权限<br>MySQL默认情况下只允许用户本地登录，所以需要赋予用户远程登录的权限。<br>使用上面提到的命令进入mysql，执行以下命令<pre class="line-numbers language-bash"><code class="language-bash">mysql<span class="token operator">></span> grant all privileges on *.* to <span class="token string">'用户'</span>@<span class="token string">'ip'</span> identified by <span class="token string">'密码'</span> with grant option<span class="token punctuation">;</span>mysql<span class="token operator">></span> flush privileges<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>第一句语句语句中，<em>.</em>代表所有库表，若想给予所有IP权限，”ip”写成“%”,所以第一句sql的意思是给予来自所有IP地址的通过“用户”，“密码”登录的用户对所有库表的所有操作权限。<br>第二句sql，刷新权限。<br>然后执行 <code>service mysql restart</code> 重启MySQL生效。</li></ol></blockquote><h2><span id="can-kao">参考</span><a href="#can-kao" class="header-anchor">#</a></h2><p><a href="https://www.cnblogs.com/zhuyp1015/p/3561470.html" target="_blank" rel="noopener">Ubuntu 安装mysql和简单操作</a><br><a href="https://blog.csdn.net/long_yi_1994/article/details/82228743" target="_blank" rel="noopener">远程连接阿里云MySQL失败解决办法</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;jin-ru-fu-wu-qi-zhi-xing-yi-xia-ming-ling&quot;&gt;进入服务器执行以下命令&lt;/span&gt;&lt;a href=&quot;#jin-ru-fu-wu-qi-zhi-xing-yi-xia-ming-ling&quot; class=&quot;heade
      
    
    </summary>
    
      <category term="mysql" scheme="http://happybug.top/categories/mysql/"/>
    
    
      <category term="mysql" scheme="http://happybug.top/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>简单的聊下new操作符</title>
    <link href="http://happybug.top/2019/03/04/new/"/>
    <id>http://happybug.top/2019/03/04/new/</id>
    <published>2019-03-04T11:36:20.000Z</published>
    <updated>2019-03-04T12:42:31.069Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#ding-yi">定义</a></li><li><a href="#yu-fa">语法</a></li><li><a href="#dai-return-de-gou-zao-han-shu">带return的构造函数</a></li><li><a href="#new-de-guo-cheng-zhong-fa-sheng-liao-shi-me">new的过程中发生了什么？</a></li><li><a href="#zi-ji-shi-xian-yi-ge-new-cao-zuo-fu">自己实现一个new操作符</a></li><li><a href="#yan-zheng">验证</a></li></ul><!-- tocstop --></div><h2><span id="ding-yi">定义</span><a href="#ding-yi" class="header-anchor">#</a></h2><p><code>new 运算符创建一个用户定义的对象类型的实例或具有构造函数的内置对象的实例。</code></p><h2><span id="yu-fa">语法</span><a href="#yu-fa" class="header-anchor">#</a></h2><p><code>new constructor([arguments])</code></p><blockquote><p> constructor: 一个指定对象实例的类型的类或函数</p></blockquote><blockquote><p> arguments: 用来被contructor调用的参数列表</p></blockquote><p>其中constructor就是构造函数。</p><p>举个栗子：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Car</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span><span class="token punctuation">}</span>Car<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>go <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'the '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">+</span> <span class="token string">' car is going'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>car<span class="token punctuation">.</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 访问构造函数的属性</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>car<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 访问构造函数原型上的属性</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>通过以上代码可以看出new 创建的实例有以下几个特点：</p><ul><li>可以访问构造函数的属性</li><li>可以访问构造函数原型里的属性</li></ul></blockquote><h2><span id="dai-return-de-gou-zao-han-shu">带return的构造函数</span><a href="#dai-return-de-gou-zao-han-shu" class="header-anchor">#</a></h2><p>上面的构造函数Car并没有返回值(可以理解为返回了undefined),但是如果添加return返回值的情况会发生什么呢？</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Car</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Car<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>go <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'the '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">+</span> <span class="token string">' car is going'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>car<span class="token punctuation">.</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// red</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>car<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// the red car is going</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>构造函数返回了一个基础类型的数值，此时实例car与之前的运行结构并没有差异。</p><p>那么，如果将return的基础类型更换一个复杂类型呢？</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Car</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span> weight<span class="token punctuation">:</span> <span class="token number">500</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Car<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>go <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'the '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">+</span> <span class="token string">' car is going'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>car<span class="token punctuation">.</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>car<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Uncaught TypeError: car.go is not a function</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时，上面的运行结果发生了变化，car.color为undefined,而且也访问不到构造函数原型上的方法了。</p><p>这个时候我们将car实例在控制台打印一下的话会发现，car实例实际上是：<code>{weight: 500}</code>。</p><blockquote><p>通过以上实验可以得出两个结论：</p><ul><li>构造函数返回基本类型时，该返回值没有任何作用</li><li>构造函数返回复杂类型时，实例的结果为该返回值，实例将访问不到构造函数的属性以及构造函数原型上的属性。</li></ul></blockquote><h2><span id="new-de-guo-cheng-zhong-fa-sheng-liao-shi-me">new的过程中发生了什么？</span><a href="#new-de-guo-cheng-zhong-fa-sheng-liao-shi-me" class="header-anchor">#</a></h2><blockquote><ol><li>创建一个继承自构造函数原型的对象</li><li>使用指定的参数调用构造函数，并将执行过程中的this指向刚刚创建的对象</li><li>由构造函数返回的对象就是new的结果。如果构造函数没有返回对象，那么返回步骤1中创建的对象。</li></ol></blockquote><h2><span id="zi-ji-shi-xian-yi-ge-new-cao-zuo-fu">自己实现一个new操作符</span><a href="#zi-ji-shi-xian-yi-ge-new-cao-zuo-fu" class="header-anchor">#</a></h2><p>通过上移端我们已经知道了new的过程找那个发生了什么，那么接下来我们就可以自己模拟一下new操作符的实现了。</p><p>1、首先创建一个继承自构造函数原型的对象</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> Con <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shift<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 函数的第一个参数被当做构造函数</span>  <span class="token keyword">const</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Con<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// const obj = {};</span>  <span class="token comment" spellcheck="true">// Object.setPrototypeOf(obj, Con.prototype);</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述过程中我们获取了函数的第一个参数，这个参数被当做构造函数，然后创建了一个对象obj，并让对象obj继承了构造函数的原型。</p><p>2、执行该构造函数，并将this指向构造函数</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> Con <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shift<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 函数的第一个参数被当做构造函数</span>  <span class="token keyword">const</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Con<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>  Con<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 执行了构造函数，并将构造函数的this指向了obj</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、如果构造函数执行之后返回了一个object对象就直接返回它，否则返回obj</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> Con <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shift<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 函数的第一个参数被当做构造函数</span>  <span class="token keyword">const</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Con<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> result <span class="token operator">=</span> Con<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 执行了构造函数，并将构造函数的this指向了obj</span>  <span class="token keyword">return</span> result <span class="token keyword">instanceof</span> <span class="token class-name">Object</span> <span class="token operator">?</span> result <span class="token punctuation">:</span> obj<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="yan-zheng">验证</span><a href="#yan-zheng" class="header-anchor">#</a></h2><p>以上就完成了new操作符的所有过程，接下来验证一下我们写的方法是否正确。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Car</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span><span class="token punctuation">}</span>Car<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>go <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'the '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">+</span> <span class="token string">' car is going'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> car <span class="token operator">=</span> <span class="token function">create</span><span class="token punctuation">(</span>Car<span class="token punctuation">,</span> <span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>car<span class="token punctuation">.</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>car<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你可以将以上代码复制到控制台查看是否正确执行。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;toc&quot;&gt;

&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#ding-yi&quot;&gt;定义&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#yu-fa&quot;&gt;语法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#dai-return-de-gou-zao
      
    
    </summary>
    
      <category term="前端" scheme="http://happybug.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="基础" scheme="http://happybug.top/categories/%E5%89%8D%E7%AB%AF/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="面试" scheme="http://happybug.top/categories/%E5%89%8D%E7%AB%AF/%E5%9F%BA%E7%A1%80/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="基础" scheme="http://happybug.top/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="前端" scheme="http://happybug.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>isNaN 与 Number.isNaN 区别</title>
    <link href="http://happybug.top/2018/06/01/NaN/"/>
    <id>http://happybug.top/2018/06/01/NaN/</id>
    <published>2018-06-01T04:51:49.000Z</published>
    <updated>2018-06-02T09:49:39.000Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="nan">NaN</span><a href="#nan" class="header-anchor">#</a></h2><p>js中有一个特殊的对象：NaN，它表示一个非法的数字，即：Not a Number。<br>在js中她也是唯一一个不等于自身的变量，即：<code>NaN !== NaN</code> <code>NaN != NaN</code></p><h2><span id="window-isnan">window.isNaN</span><a href="#window-isnan" class="header-anchor">#</a></h2><p>window.isNaN在接收到参数后，会先把参数<code>转化成数字A</code>(重点)，然后再比较<code>A !== A</code>，用代码可以表示为：</p><pre class="line-numbers language-javascript"><code class="language-javascript">window<span class="token punctuation">.</span>isNaN <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> val <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> val <span class="token operator">!==</span> val<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>由于中间存在一步将参数转化成数字的过程，所以最后结果会出现各种差异</p></blockquote><p>例如：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 以下结果为true的都是因为Number的值是NaN</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// true</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span class="token function">isNaN</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">'字符串'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// true</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'123a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span class="token comment" spellcheck="true">// 以下结果为false，是因为她们可以被转化成数字</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="number-isnan">Number.isNaN</span><a href="#number-isnan" class="header-anchor">#</a></h2><p>Number.isNaN是在es6中新增的方法，该方法就是用来参数是否是 <code>NaN</code> 这个值的。<br>例如：</p><pre class="line-numbers language-javascript"><code class="language-javascript">Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其实这个api判断的内容很简单，只要你传入的参数不是<code>NaN</code>，那么结果都是false，否则为true。<br>由于这是es6的方法，在不支持的浏览器中，可以使用polyfill：</p><pre class="line-numbers language-javascript"><code class="language-javascript">Number<span class="token punctuation">.</span>isNaN <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> val <span class="token operator">!==</span> val<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 或者</span>Number<span class="token punctuation">.</span>isNaN <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token keyword">typeof</span> val <span class="token operator">===</span> <span class="token string">'number'</span> <span class="token operator">&amp;&amp;</span>    window<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>  <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;nan&quot;&gt;NaN&lt;/span&gt;&lt;a href=&quot;#nan&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;js中有一个特殊的对象：NaN，它表示一个非法的数字，即：Not a Number。&lt;br&gt;在js中她也是唯一一个不等于自
      
    
    </summary>
    
      <category term="前端" scheme="http://happybug.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="isNaN" scheme="http://happybug.top/categories/%E5%89%8D%E7%AB%AF/isNaN/"/>
    
    
      <category term="isNaN" scheme="http://happybug.top/tags/isNaN/"/>
    
  </entry>
  
  <entry>
    <title>Margin Collpase/ Margin 重叠</title>
    <link href="http://happybug.top/2018/05/13/margin-collpase/"/>
    <id>http://happybug.top/2018/05/13/margin-collpase/</id>
    <published>2018-05-13T05:11:11.000Z</published>
    <updated>2018-05-13T07:51:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="shi-me-shi-margin-collpase">什么是margin collpase</span><a href="#shi-me-shi-margin-collpase" class="header-anchor">#</a></h2><p>margin-collpase，又称外边距塌陷或边距重叠，它表示在html流式布局中，在垂直方向上外边距会发生叠加的现象。</p><h2><span id="margin-collpase-de-biao-xian">margin collpase 的表现</span><a href="#margin-collpase-de-biao-xian" class="header-anchor">#</a></h2><p>测试连接：<a href="https://codesandbox.io/s/pyz8nq0o9x" target="_blank" rel="noopener">点这里</a>，你可以边看文章，边修改属性以加深理解。</p><h3><span id="1-xiong-di-yuan-su-zhi-jian-cun-zai-chui-zhi-fang-xiang-de-margin-qu-zui-da-zhi">1、兄弟元素之间存在垂直方向的margin，取最大值</span><a href="#1-xiong-di-yuan-su-zhi-jian-cun-zai-chui-zhi-fang-xiang-de-margin-qu-zui-da-zhi" class="header-anchor">#</a></h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>div1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>div2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.div1</span> </span><span class="token punctuation">{</span>  <span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.div2</span> </span><span class="token punctuation">{</span>  <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上这个html结构就符合<code>兄弟元素之间存在垂直方向的margin</code>的情况，如果没有<code>margin collpase</code>特性的话，div1与div2之间的间距应该是 10 + 15 = 25px，但是实际情况是div2与div1之间的间距为15px，为什么会发生这种情况呢？为什么是15px不是10px呢？</p><blockquote><blockquote><blockquote><p>是因为css在解析过程中发现，这两个div之间发生了<code>margin collpase</code>，css会将两者之间的间距渲染成了两者之间的最大值，这里就是15px。</p></blockquote></blockquote></blockquote><p>即便你将div1的margin-bottom调整成15px，div2的margin-top调整成10px，最后两者之间的间距仍然是15px，因为取得是最大值。</p><h3><span id="2-fu-zi-yuan-su-margin-die-jia-qu-zui-da-zhi">2、父子元素margin叠加，取最大值</span><a href="#2-fu-zi-yuan-su-margin-die-jia-qu-zui-da-zhi" class="header-anchor">#</a></h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>border<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>div<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.border</span> </span><span class="token punctuation">{</span>  <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#666</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.div1</span> </span><span class="token punctuation">{</span>  <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.div2</span> </span><span class="token punctuation">{</span>  <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上示例的demo，符合<code>父子元素margin叠加</code>的条件，首先div1的第一个子元素是div2，而且div2没有padding、border等属性，如果不考虑<code>margin collpase</code>的话，border与div2之间的间距应该是 10 + 15 = 25px，而实际结果是15px，是由于<code>margin collpase</code>作用的结果，造成他们之间的间距是div1和div2间距的最大者。</p><h3><span id="3-kong-yuan-su-de-margin-die-jia">3、空元素的margin叠加</span><a href="#3-kong-yuan-su-de-margin-die-jia" class="header-anchor">#</a></h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>border<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.border</span> </span><span class="token punctuation">{</span>  <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#666</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.div1</span> </span><span class="token punctuation">{</span>  <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>  <span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>div1是个空元素，它同时具有margin-top、margin-bottom属性，但是最终呈现出来的结果是border的高度只有15px，而不是25px。所有对于空元素而言，他依然是取的最大值。</p><h3><span id="margin-collpase-shi-hao-huan-shi-pi">margin collpase 是好还是坏？</span><a href="#margin-collpase-shi-hao-huan-shi-pi" class="header-anchor">#</a></h3><p><code>margin collpase</code>的特性谈不上更好或是更坏，他是在css设计时就被制定出来的，在早期的html中页面比较简单，大多以多段文字的形式进行展示，这种方式有助于保证段落之间展示合适的距离，而且在文章结束出依然有margin-bottom的支撑。但是在现代化的开发中，我们需要去了解这个特性，并在他出现的时候，合理的判断出来。</p><h3><span id="ru-he-gui-bi">如何规避？</span><a href="#ru-he-gui-bi" class="header-anchor">#</a></h3><p>如果你仔细观察过上面的例子，你会发现只要你随便在内层div中加入padding或者border等属性，就会使这个特性消失，所以规避<code>margin collpase</code>并不难，常见的方法如下：</p><blockquote><blockquote><blockquote><p>1.外层padding<br>2.透明边框border:1px solid transparent;<br>3.绝对定位postion:absolute:<br>4.外层DIV overflow:hidden;<br>5.内层DIV　加float:left;display:inline;<br>6.外层DIV有时会用到zoom:1;</p></blockquote></blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;shi-me-shi-margin-collpase&quot;&gt;什么是margin collpase&lt;/span&gt;&lt;a href=&quot;#shi-me-shi-margin-collpase&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;
      
    
    </summary>
    
      <category term="前端" scheme="http://happybug.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="margin" scheme="http://happybug.top/categories/%E5%89%8D%E7%AB%AF/margin/"/>
    
    
      <category term="margin-collpase" scheme="http://happybug.top/tags/margin-collpase/"/>
    
  </entry>
  
  <entry>
    <title>数组操作之reduce</title>
    <link href="http://happybug.top/2018/03/08/reduce/"/>
    <id>http://happybug.top/2018/03/08/reduce/</id>
    <published>2018-03-08T04:15:08.000Z</published>
    <updated>2018-03-09T02:17:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>reduce方法是Array.prototype上的一个方法，是在es6中添加的数组方法。</p><blockquote><p>语法：<br>arr.reduce(callback[, initialValue])</p></blockquote><p>callback: 是一个function参数，该function接收四个参数<br>&nbsp;&nbsp;&nbsp;&nbsp;<code>accumulator</code>：累加器<br>&nbsp;&nbsp;&nbsp;&nbsp;<code>currentValue</code>：数组中正在处理的元素<br>&nbsp;&nbsp;&nbsp;&nbsp;<code>currentIndex</code>：正在处理的元素的索引<br>&nbsp;&nbsp;&nbsp;&nbsp;<code>array</code>：原数组<br>initialValue： 可选，用于充当callback的第一个参数的初始值，如果不传该值，则callback的第一个参数是数组的第一个值。</p><p>该方法执行后返回累计处理的结果。</p><p>如果传了initialValue，callback第一次执行的时候accumulator为initialValue，currentValue为数组中的第一个值；如果没有传initialValue，callback第一次执行的时候，accumulator为数组的第一个值，currentValue为数组中的第二个值。</p><p><div class="tip">值得注意的是：<br>1、如果数组为空，且initialValue为空，会抛出TypeError。<br>2、如果数组仅有一个元素，且没有提供initialValue，那么此唯一值将被返回并且callback不会被执行。<br>3、如果数组为空，且提供了initialValue，那么此唯一值将被返回并且callback不会被执行。<br></div><br>接下来我们来看下这三种情况：<br>1、数组为空且initialValue为空</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span> cur<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span> cur<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> pre <span class="token operator">+</span> cur<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将会抛出异常 Uncaught TypeError: Reduce of empty array with no initial value</span><span class="token comment" spellcheck="true">// 但是这段代码将不会报错,因为初始值不为空</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span> cur<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span> cur<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> pre <span class="token operator">+</span> cur<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、数组仅有一个元素且initialValue为空</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span> cur<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span> cur<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> pre <span class="token operator">+</span> cur<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">,</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span> cur<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span> cur<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> pre <span class="token operator">+</span> cur<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 以上两种情况都将输出1，且console.log不会输出。</span><span class="token punctuation">[</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span> cur<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span> cur<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> pre <span class="token operator">+</span> cur<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 这种方式也将输出1，但是callback是执行的</span><span class="token comment" spellcheck="true">// 请注意[1],[,1,,]和[null,1,null]的区别</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、数组为空，且initialValue不为空</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span> cur<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span> cur<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> pre <span class="token operator">+</span> cur<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 结果将输出1，且callback不执行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="can-kao">参考</span><a href="#can-kao" class="header-anchor">#</a></h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce" target="_blank" rel="noopener">Array.prototype.reduce()</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;reduce方法是Array.prototype上的一个方法，是在es6中添加的数组方法。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;语法：&lt;br&gt;arr.reduce(callback[, initialValue])&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;callba
      
    
    </summary>
    
      <category term="前端" scheme="http://happybug.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="数组" scheme="http://happybug.top/categories/%E5%89%8D%E7%AB%AF/%E6%95%B0%E7%BB%84/"/>
    
    
      <category term="数组" scheme="http://happybug.top/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="reduce" scheme="http://happybug.top/tags/reduce/"/>
    
  </entry>
  
  <entry>
    <title>js对象类型的判断</title>
    <link href="http://happybug.top/2018/02/06/type/"/>
    <id>http://happybug.top/2018/02/06/type/</id>
    <published>2018-02-06T07:10:09.000Z</published>
    <updated>2019-07-19T03:40:40.566Z</updated>
    
    <content type="html"><![CDATA[<p>JS对象类型的判断方式大致有三种方式：</p><blockquote><ol><li>typeof</li><li>instanceof</li><li>Object.prototype.toString.call()</li></ol></blockquote><h2><span id="javascript-de-shu-ju-lei-xing">JavaScript的数据类型</span><a href="#javascript-de-shu-ju-lei-xing" class="header-anchor">#</a></h2><p>JavaScript中的数据类型可以分为两类：原始类型、引用类型。</p><p>原始数据类型：</p><ul><li>Boolean</li><li>Number</li><li>String</li><li>Undefined</li><li>Null</li><li>Symbol(ECMAScript 6 新定义)</li></ul><p>引用类型:</p><ul><li>Object</li></ul><p>原始数据类型和引用类型的<code>区别</code>在于：</p><blockquote><ol><li><code>原始数据类型</code>会存放在<code>变量对象</code>中，这个对象实际上是存放在堆内存中的，但是他的功能比较特殊，理解上可以和堆内存做一下区分，在变量对象中的原始数据类型都是直接存的值，且是按值访问的，所以原始类型的操作都是操作的实际的值。</li><li><code>引用类型</code>的值是保存在堆内存中的对象。JavaScript不允许直接访问堆内存中的位置，因此我们不能直接操作对象的堆内存空间。在操作对象时，实际上是在操作对象的引用而不是实际的对象。因此，引用类型的值都是按引用访问的。当访问引用类型的值的时候，其实上首先从变量对象中获取了该对象的地址应用(或者地址指针)，然后再从堆内存中获取我们需要的数据。</li></ol></blockquote><p>具体可以阅读<a href="http://www.cnblogs.com/NatChen/p/6388793.html" target="_blank" rel="noopener">前端基础进阶（一）：内存空间详细图解</a>，解析的很详细。</p><h2><span id="typeof">typeof</span><a href="#typeof" class="header-anchor">#</a></h2><p>typeof返回的是元素的数据类型。请注意typeof可以象函数那样使用<code>typeof(xx)</code>，但是typeof并不是一个函数，而是一个操作符。</p><p>我们可以像下面这样来调用typeof:</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'str'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>JavaScript类型表格</p><table><thead><tr><th>Value</th><th style="text-align:left">Class</th><th style="text-align:right">Type </th></tr></thead><tbody><tr><td>“foo”</td><td style="text-align:left">String</td><td style="text-align:right">string </td></tr><tr><td>new String(“foo”)</td><td style="text-align:left">String</td><td style="text-align:right">object </td></tr><tr><td>1.2</td><td style="text-align:left">Number</td><td style="text-align:right">number</td></tr><tr><td>new Number(1.2)</td><td style="text-align:left">Number</td><td style="text-align:right">object</td></tr><tr><td>true</td><td style="text-align:left">Boolean</td><td style="text-align:right">boolean</td></tr><tr><td>new Boolean(true)</td><td style="text-align:left">Boolean</td><td style="text-align:right">object</td></tr><tr><td>new Date()</td><td style="text-align:left">Date</td><td style="text-align:right">object</td></tr><tr><td>new Error()</td><td style="text-align:left">Error</td><td style="text-align:right">object</td></tr><tr><td>[1,2,3]</td><td style="text-align:left">Array</td><td style="text-align:right">object</td></tr><tr><td>new Array(1,2,3)</td><td style="text-align:left">Array</td><td style="text-align:right">object</td></tr><tr><td>new Function()</td><td style="text-align:left">Function</td><td style="text-align:right">function</td></tr><tr><td>/abc/g</td><td style="text-align:left">RegExp</td><td style="text-align:right">object</td></tr><tr><td>new RegExp(“meow”)</td><td style="text-align:left">RegExp</td><td style="text-align:right">object</td></tr><tr><td>()</td><td style="text-align:left">Object</td><td style="text-align:right">object</td></tr><tr><td>new Object()</td><td style="text-align:left">Object</td><td style="text-align:right">object</td></tr></tbody></table><p>参考：<a href="http://wiki.jikexueyuan.com/project/javascript-garden/types/typeof.html" target="_blank" rel="noopener">typeof 操作符</a></p><p>在这个表格中 <code>type</code> 一列就是<code>typeof</code>的运算结果。这个值都是小写的，而且涉及到new操作的除了Function以外都是object。<br>以上表格需要注意的点是：</p><div class="tip">typeof ‘1’ 和 typeof (new String(‘1’)) 的值并不相同，同样的Number、Boolean也有相同的问题。<br></div><p>上表中涉及到的内容还少了几个值：<code>undefined</code>、<code>NaN</code>、<code>null</code>，接下来看下这几个值。</p><ol><li><code>typeof undefined === &#39;undefined&#39;</code><br>在js中不光只有<code>undefined</code>的typeof值是 ‘undefined’，<code>typeof document.all === &#39;undefined&#39;</code>也是成立的。<code>document.all</code> 也是个奇葩的东西，在chrome等现代浏览器中，单独使用<code>document.all</code>的时候可以正常输出一个数组（包含了所有dom节点），但在判断boolean时，它的值是false，但在ie6 7 8中就是true</li><li><code>typeof NaN === &#39;number&#39;</code><br>js中遵循的是<a href="https://en.wikipedia.org/wiki/IEEE_754" target="_blank" rel="noopener">IEEE 754</a>浮点数标准，在这个标准中规定了NaN也是一个浮点数：<code>arithmetic formats: sets of binary and decimal floating-point data, which consist of finite numbers (including signed zeros and subnormal numbers), infinities, and special &quot;not a number&quot; values (NaNs)</code></li><li><code>typeof null === &#39;object&#39;</code><br>null的值为object，确实是让人产生疑惑的，这里面还有一些小故事，有兴趣的可以查看<a href="https://www.zhihu.com/question/66941121/answer/247939890" target="_blank" rel="noopener">有哪些明明是bug，却被说成是feature的例子？</a> 的回答。<br>总结一下原因：JavaScript最初版本使用的是32位心痛，为了性能考虑，使用了低位存储变量的类型信息的方式，也就是：000-&gt;对象，001-&gt;整数，010-&gt;浮点数，100-&gt;字符串，110-&gt;布尔，这样的设置导致了null出现了不同的情况，因为null代表的是空指针，在多数平台下都是0x00来表示，低位的三位自然也就是000，所以typeof null 就是 ‘object’了。</li></ol><h2><span id="instanceof">instanceof</span><a href="#instanceof" class="header-anchor">#</a></h2><p>判断某个实例是否属于某种类型。<br>用法：L instanceof R<br>其中L表示要判断的实例，R是一个类型值，比如 <code>var a = {}; a instanceof Object</code>，instanceof的一个更重要的作用是用于判断一个实例是否属于它的父类型，比如如下：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>Child<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> child <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child <span class="token keyword">instanceof</span> <span class="token class-name">Child</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child <span class="token keyword">instanceof</span> <span class="token class-name">Parent</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>instanceof不光可以判断实例是否属于直接父类，它也可以判断实例是否属于祖先的实例。<br>比如：</p><pre class="line-numbers language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><div class="tip">instanceof的执行原理：<br>1、如果L不是<code>Object</code>，返回false。<br>2、否则，另<code>L = L.__proto__</code>，<br>3、如果<code>L === null</code>返回false<br>4、判断<code>L === R.prototype</code>，如果为true，返回true，否则执行步骤2。<br></div>可以看到，这其实是一个循环的过程，会不断的取<code>L.__proto__</code>的值和<code>R.prototype</code>进行对比。这个地方涉及到了原型链的相关知识，这里不做深入探讨，引入一张经典图供参考：</p><p><img src="/images/prototype.jpg" alt="原型链图"></p><p>有关于<code>instanceof</code>的规范可以查看<a href="http://www.ecma-international.org/ecma-262/5.1/#sec-11.8.6" target="_blank" rel="noopener">11.8.6 The instanceof operator</a>，其中的第7步中涉及到的<code>[[HasInstance]]</code>相关的方法，可以查看[15.3.5.3 <a href="http://www.ecma-international.org/ecma-262/5.1/index.html#sec-15.3.5.3" target="_blank" rel="noopener">[HasInstance]] (V)</a>，其中的参数V就是我们例子中的L，F就是我们例子中的R，O就是R.prototype。</p><p>那么接下来我们来看下一些instanceof示例：</p><pre class="line-numbers language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">instanceof</span> <span class="token class-name">Number</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Number</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a'</span> <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token keyword">instanceof</span> <span class="token class-name">Boolean</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Boolean</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上是 Number、String、Boolean类型的结果，之所以在非new的情况下返回false，是因为在<code>[[HasInstance]]</code>中的第一步就返回了false</p><h3><span id="yi-xia-nei-rong-she-ji-dao-liao-yuan-xing-lian-xiang-guan-nei-rong-ke-yi-xian-kan-xia-shang-mian-de-yuan-xing-lian-de-tu">以下内容涉及到了原型链相关内容，可以先看下上面的原型链的图</span><a href="#yi-xia-nei-rong-she-ji-dao-liao-yuan-xing-lian-xiang-guan-nei-rong-ke-yi-xian-kan-xia-shang-mian-de-yuan-xing-lian-de-tu" class="header-anchor">#</a></h3><pre class="line-numbers language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number <span class="token keyword">instanceof</span> <span class="token class-name">Number</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>转换一下其实就是 <code>Number.__proto__ === Number.prototype</code>，这个当然是false了，<br>因为所有的<code>构造器/函数的__proto__</code>都指向了Function.prototype<br>同理 String、Boolean、Object、Function、Array、Error、Date、RegExp的<code>__proto__</code>都指向了Function.prototype</p><pre class="line-numbers language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面等式实际上是在判断<code>Object.__proto__ === Object.prototype</code>，<code>Object.__proto__</code>指向了 <code>Function.prototype</code>，而<code>Function.prototype.__proto__</code>指向了<code>Object.prototype</code>，所以结果为true。</p><pre class="line-numbers language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Function <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>Function.__proto__</code> 指向了 <code>Function.prototype</code>，而<code>Function.prototype.__proto__</code>指向了<code>Object.prototype</code>，所以结果为true。</p><pre class="line-numbers language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object <span class="token keyword">instanceof</span> <span class="token class-name">Function</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>Object.__proto__</code> 指向了 <code>Function.prototype</code>，而<code>Function.prototype.__proto__</code>指向了<code>Object.prototype</code>，所以结果为true。</p><h2><span id="object-prototype-tostring-call">Object.prototype.toString.call()</span><a href="#object-prototype-tostring-call" class="header-anchor">#</a></h2><p>由于typeof的限制、instanceof的不方便性，在开发中我们会经常使用<code>Object.prototype.toString.call()</code>来判断对象的类型。<br>例如：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "[object Array]"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>那么它的原理是什么呢？<br><a href="http://ecma-international.org/ecma-262/5.1/#sec-15.2.4.2" target="_blank" rel="noopener">15.2.4.2 Object.prototype.toString ( )</a> ES5.1规范里定义了Object.prototype.toString()的行为：<br><strong><br>1、如果this的值为 <code>undefined</code>，就返回<code>&quot;[object Undefined]&quot;</code>.<br>2、如果this的值为<code>null</code>，就返回<code>&quot;[object Null]&quot;</code>.<br>3、O = ToObject(this) 即 O等于ToObject(this)的执行结果<br>4、class = O.[[Class]] 即 class 等于O的内部属性[[Class]]的值<br>5、返回三个字符串”[object “, class, 以及 “]”连接后的新字符串.</strong><br>在规范的<a href="http://ecma-international.org/ecma-262/5.1/#sec-8.6.2" target="_blank" rel="noopener">8.6.2 Object Internal Properties and Methods</a> 有关于<code>[[Class]]</code>的说明：</p><blockquote><p>The value of the [[Class]] internal property is defined by this specification for every kind of built-in object. The value of the [[Class]] internal property of a host object may be any String value except one of “Arguments”, “Array”, “Boolean”, “Date”, “Error”, “Function”, “JSON”, “Math”, “Number”, “Object”, “RegExp”, and “String”. The value of a [[Class]] internal property is used internally to distinguish different kinds of objects. Note that this specification does not provide any means for a program to access that value except through Object.prototype.toString (see 15.2.4.2).</p></blockquote><p>大致翻译一下：本规范中的所有的内置对象都定义了内部属性[[Class]]。宿主对象的内部属性[[Class]]的值可以使除了”Arguments”, “Array”, “Boolean”, “Date”, “Error”, “Function”, “JSON”, “Math”, “Number”, “Object”, “RegExp”, “String”的任意字符串。内部属性[[Class]]的值被用于区分不同的对象。注意，本规范中除了Object.prototype.toString (见 15.2.4.2)没有提供任何方式可以获取这个值。</p><p>接下来我们看下<code>ToObject</code>是做什么的？<br>ES5 规范参见这里 <a href="http://ecma-international.org/ecma-262/5.1/#sec-9.9" target="_blank" rel="noopener">9.9 ToObject</a>.</p><table><thead><tr><th>参数类型</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td>Undefined</td><td style="text-align:left">抛出TypeError异常 </td></tr><tr><td>Null</td><td style="text-align:left">抛出TypeError异常</td></tr><tr><td>Boolean</td><td style="text-align:left">new 一个Boolean对象，该对象内部属性[[PrimitiveValue]]被设置为输入参数</td></tr><tr><td>Number</td><td style="text-align:left">new 一个Number对象，该对象内部属性[[PrimitiveValue]]被设置为输入参数</td></tr><tr><td>String</td><td style="text-align:left">new 一个String对象，该对象内部属性[[PrimitiveValue]]被设置为输入参数</td></tr><tr><td>Object</td><td style="text-align:left">直接返回</td></tr></tbody></table><p>这就可以解释<code>Object.prototype.toString.call(1)</code> 和 <code>Object.prototype.toString.call(new Number(1))</code> 的结果都是”[object Number]” 了。<br>有关ES6中的<code>Object.prototype.toString.call()</code> 的内容可以阅读参考11的文章。</p><h2><span id="can-kao">参考</span><a href="#can-kao" class="header-anchor">#</a></h2><ol><li><a href="http://www.cnblogs.com/NatChen/p/6388793.html" target="_blank" rel="noopener">前端基础进阶（一）：内存空间详细图解</a></li><li><a href="http://wiki.jikexueyuan.com/project/javascript-garden/types/typeof.html" target="_blank" rel="noopener">typeof 操作符</a></li><li><a href="https://www.ibm.com/developerworks/cn/web/1306_jiangjj_jsinstanceof/index.html" target="_blank" rel="noopener">JavaScript instanceof 运算符深入剖析</a></li><li><a href="https://www.zhihu.com/question/66941121/answer/247939890" target="_blank" rel="noopener">有哪些明明是bug，却被说成是feature的例子？</a></li><li><a href="https://en.wikipedia.org/wiki/IEEE_754" target="_blank" rel="noopener">IEEE 754</a></li><li><a href="http://bonsaiden.github.io/JavaScript-Garden/zh/#types.typeof" target="_blank" rel="noopener">typeof 操作符</a></li><li><a href="https://zhuanlan.zhihu.com/p/23248844" target="_blank" rel="noopener">JavaScript进阶系列—类型中的typeof 操作符</a></li><li><a href="http://www.ecma-international.org/ecma-262/6.0/index.html" target="_blank" rel="noopener">ECMAScript® 2015 Language Specification</a></li><li><a href="http://www.ecma-international.org/ecma-262/5.1/index.html" target="_blank" rel="noopener">ECMAScript® Language Specification</a></li><li><a href="https://div.io/topic/2016" target="_blank" rel="noopener">instanceof 操作符实现原理解析</a></li><li><a href="https://www.cnblogs.com/ziyunfei/archive/2012/11/05/2754156.html" target="_blank" rel="noopener">JavaScript:Object.prototype.toString方法的原理</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;JS对象类型的判断方式大致有三种方式：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;typeof&lt;/li&gt;
&lt;li&gt;instanceof&lt;/li&gt;
&lt;li&gt;Object.prototype.toString.call()&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquot
      
    
    </summary>
    
      <category term="前端" scheme="http://happybug.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://happybug.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="原型" scheme="http://happybug.top/tags/%E5%8E%9F%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>Vue中v-model的使用</title>
    <link href="http://happybug.top/2018/01/30/v-model/"/>
    <id>http://happybug.top/2018/01/30/v-model/</id>
    <published>2018-01-30T14:01:42.000Z</published>
    <updated>2018-03-08T01:51:12.524Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="v-model-fen-lei">v-model 分类</span><a href="#v-model-fen-lei" class="header-anchor">#</a></h2><p>v-model可以分为两种类型：</p><ol><li>作用于原生html元素上，如input、textarea、select上</li><li>绑定在组件上的v-model</li></ol><h2><span id="yuan-sheng-html-yuan-su">原生html元素</span><a href="#yuan-sheng-html-yuan-su" class="header-anchor">#</a></h2><h3><span id="wen-ben">文本</span><a href="#wen-ben" class="header-anchor">#</a></h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>输入信息<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3><span id="fu-xuan-kuang-checkbox">复选框 checkbox</span><a href="#fu-xuan-kuang-checkbox" class="header-anchor">#</a></h3><p>checked的值将是true或false</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checked<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>复选框组</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Jack<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkedNames<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>John<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkedNames<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Mike<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkedNames<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这个例子中，checkedNames应该是个数组类型，如果你选中了 ‘Jack’，那么checkedNames的值应该是[‘Jack’]，详情可以查看 <a href="https://cn.vuejs.org/v2/guide/forms.html#%E5%A4%8D%E9%80%89%E6%A1%86" target="_blank" rel="noopener">vue官方-复选框</a><br>此外，复选框还可以额外设置true或者false的值：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>  <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span>  <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>toggle<span class="token punctuation">"</span></span>  <span class="token attr-name">true-value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>yes<span class="token punctuation">"</span></span>  <span class="token attr-name">false-value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当选中时，vm.toggle的值为 ‘yes’，没有选中时 vm.toggle的值为 ‘no’，这种模式仅在非多选时起作用。</p><h3><span id="dan-xuan-kuang">单选框</span><a href="#dan-xuan-kuang" class="header-anchor">#</a></h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>One<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>picked<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>vm.picked 的值为 ‘One’</p><h3><span id="xuan-ze-kuang">选择框</span><a href="#xuan-ze-kuang" class="header-anchor">#</a></h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selected<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">disabled</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>请选择<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>B<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>C<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时selected的值就是option中的值，如果select添加了 multiple 属性，那么selected将是一个数组。<br>当然还可以通过动态绑定的形式进行：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selected<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>option in options<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>option.value<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    {{ option.text }}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Selected: {{ selected }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'...'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    selected<span class="token punctuation">:</span> <span class="token string">'A'</span><span class="token punctuation">,</span>    options<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span> text<span class="token punctuation">:</span> <span class="token string">'One'</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token string">'A'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span> text<span class="token punctuation">:</span> <span class="token string">'Two'</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token string">'B'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span> text<span class="token punctuation">:</span> <span class="token string">'Three'</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token string">'C'</span> <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时selected的值就是 A或B或C</p><h3><span id="xiu-shi-fu">修饰符</span><a href="#xiu-shi-fu" class="header-anchor">#</a></h3><p><code>.lazy</code> v-model会在每次input事件触发后将输入框的值同步到数据上，添加了lazy之后，就转变为change事件进行同步。<br><code>.number</code> 将输入的内容转换成数值类型的<br><code>.trim</code> 过滤首尾空白字符</p><h2><span id="zu-jian-shang-de-v-model">组件上的v-model</span><a href="#zu-jian-shang-de-v-model" class="header-anchor">#</a></h2><p>其实以上内容在官网上都有，而且比这里详细，这里只是做个大概整体梳理，本文的主要内容是讲解<code>组件上的v-model</code>的应用。</p><p>首先我们来简单看下v-model这个指令，这个指令实际上是监听了<code>input</code>事件，然后动态改变了v-model绑定的值，出于这个思路，在组件的使用上其实也是利用的<code>input</code> 这个事件，并动态改变了model绑定的值。</p><p>下面我们来看一个例子： 有一个简单的图片展示组件ImageView，当用户点击按钮后，显示该组件遮盖整个屏幕，在用户点击图片任意位置后，隐藏组件。</p><p>组件的功能比较简单，以下是代码实现(未添加css)：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span><span class="token operator">&lt;</span>section v<span class="token operator">-</span>show<span class="token operator">=</span><span class="token string">"currentValue"</span> @click<span class="token operator">=</span><span class="token string">"close($event)"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>img <span class="token punctuation">:</span>src<span class="token operator">=</span><span class="token string">"imgUrl"</span> <span class="token operator">/</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>section<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'imageView'</span><span class="token punctuation">,</span>    props<span class="token punctuation">:</span> <span class="token punctuation">{</span>        value<span class="token punctuation">:</span> <span class="token punctuation">{</span>            type<span class="token punctuation">:</span> Boolean<span class="token punctuation">,</span>            <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        imgUrl<span class="token punctuation">:</span> <span class="token punctuation">{</span>            type<span class="token punctuation">:</span> String<span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            currentValue<span class="token punctuation">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token function">currentValue</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 用一个本地变量代替v-model的value</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 向上广播input事件</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">value</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>currentValue <span class="token operator">=</span> val<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token function">close</span><span class="token punctuation">(</span>evt<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>currentValue <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用的时候就可以这样：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image-view</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>imageIsShow<span class="token punctuation">"</span></span> <span class="token attr-name">:imgUrl</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>imgUrl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image-view</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中imageIsShow 应该是Boolean值。</p><p>看一下ImageView组件内做了什么事情呢？</p><blockquote><ol><li>props中有一个value值，这个值就是v-model绑定的值，v-model上的值会映射到这个value上</li><li>watch中监听了两个属性值，一个是上面说的<code>value</code>，一个是 <code>currentValue</code>，这两个值之间有一定的关系：<br> 当value值发生变化时，改变currentValue的值，就好像把value映射到currentValue上一样；<br> 当currentValue发生变化时，会向上触发<code>input</code>事件，并把currentValue的值传递过去，上层组件在感受到<code>input</code>变化后，将v-model绑定的值修改为currentValue的值。</li></ol></blockquote><p>基于以上两点，在组件内的事件close方法就可以通过改变currentValue的值，达到改变v-model绑定的值了。</p><h3><span id="zu-jian-nei-de-model-shu-xing">组件内的model属性</span><a href="#zu-jian-nei-de-model-shu-xing" class="header-anchor">#</a></h3><p>在vue官网中对 自定义组件的v-model 介绍时，有如下定义()：</p><pre class="line-numbers language-javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'my-checkbox'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  model<span class="token punctuation">:</span> <span class="token punctuation">{</span>    prop<span class="token punctuation">:</span> <span class="token string">'checked'</span><span class="token punctuation">,</span>    event<span class="token punctuation">:</span> <span class="token string">'change'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  props<span class="token punctuation">:</span> <span class="token punctuation">{</span>    checked<span class="token punctuation">:</span> Boolean<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 这样就允许拿 `value` 这个 prop 做其它事了</span>    value<span class="token punctuation">:</span> String  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中多了model属性值，model.prop定义了v-model绑定的值会映射到props中的对应的值，在这个例子里就是将v-model映射到checked的值。model.event的值规定了向上触发的事件名称，默认的就是<code>input</code>，在这个例子中就是<code>change</code>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;v-model-fen-lei&quot;&gt;v-model 分类&lt;/span&gt;&lt;a href=&quot;#v-model-fen-lei&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;v-model可以分为两种类型：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
      
    
    </summary>
    
      <category term="vue" scheme="http://happybug.top/categories/vue/"/>
    
      <category term="前端" scheme="http://happybug.top/categories/vue/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="vue" scheme="http://happybug.top/tags/vue/"/>
    
      <category term="v-model" scheme="http://happybug.top/tags/v-model/"/>
    
  </entry>
  
  <entry>
    <title>箭头函数与普通函数的区别</title>
    <link href="http://happybug.top/2018/01/16/arrow-function/"/>
    <id>http://happybug.top/2018/01/16/arrow-function/</id>
    <published>2018-01-16T13:18:36.000Z</published>
    <updated>2018-03-08T01:51:12.520Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="jian-tou-han-shu-yu-pu-tong-han-shu-de-qu-bie">箭头函数与普通函数的区别</span><a href="#jian-tou-han-shu-yu-pu-tong-han-shu-de-qu-bie" class="header-anchor">#</a></h1><ol><li>写法的区别</li><li>箭头函数没有原型</li><li>基于上一条，箭头函数不能作为构造函数，不能使用new</li><li>箭头函数不绑定arguments，可以用rest写法来替代</li><li>箭头函数的this指向了上下文的this，并且不能通过call、apply、bind来改变。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;jian-tou-han-shu-yu-pu-tong-han-shu-de-qu-bie&quot;&gt;箭头函数与普通函数的区别&lt;/span&gt;&lt;a href=&quot;#jian-tou-han-shu-yu-pu-tong-han-shu-de-qu-bie&quot; cla
      
    
    </summary>
    
      <category term="前端" scheme="http://happybug.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="箭头函数" scheme="http://happybug.top/tags/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>iPhoneX H5适配</title>
    <link href="http://happybug.top/2017/11/24/iphoneX/"/>
    <id>http://happybug.top/2017/11/24/iphoneX/</id>
    <published>2017-11-24T11:31:42.000Z</published>
    <updated>2018-03-08T01:51:12.523Z</updated>
    
    <content type="html"><![CDATA[<p>嗯，苹果又出了一个屁奇怪的机型，需要前端同学们做适配了（神奇的机型）。</p><p>默认情况下，iPhoneX的适配需要考虑到头部和底部的适配，但是一般来讲，很多app内的页面头部都是原生适配的，对于H5来说顶部的适配就不大需要考虑了（实际上适配思路和底部的适配是一致的），那么我们下面就来看看底部的适配。</p><p>先来看下iPhone X的适配的安全区域：</p><img src="http://ovtdovq9q.bkt.clouddn.com/iphoneX.jpeg"><p>下方的区域是用来充当实体home键的的区域，这个区域的高度是34px。</p><p>为了适配iPhone X，苹果在页面的meta标签中多了一个 viewport-fit 属性，大概如下：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width,initial-scale<span class="token punctuation">=</span>1.0, minimum-scale<span class="token punctuation">=</span>1.0, maximum-scale<span class="token punctuation">=</span>1.0, user-scalable<span class="token punctuation">=</span>no, viewport-fit<span class="token punctuation">=</span>cover<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>viewport-fit有几个属性：<br><code>contain: 页面内容显示在safe area内</code><br><code>cover: 页面内容充满屏幕</code><br><code>auto: 默认contain</code></p><p>除了这个meta之外还有4个常量值允许你在css中使用：<br>constant(safe-area-inset-top)<br>constant(safe-area-inset-left)<br>constant(safe-area-inset-right)<br>constant(safe-area-inset-bottom)</p><p>从字面的意思应该就能明白，分别代表距离上部、左部、右部、底部的距离。<br>在 viewport-fit=contain 的情况下，以上是不生效的，也就是说只有在viewport-fit=cover的情况下才起作用。<br>且在竖屏模式下，left\right的值都是0，top的值88px，bottom的值是34px。</p><p>你可以通过给body添加：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">body </span><span class="token punctuation">{</span>    <span class="token property">padding-top</span><span class="token punctuation">:</span> <span class="token function">constant</span><span class="token punctuation">(</span>safe-area-inset-top<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">padding-left</span><span class="token punctuation">:</span> <span class="token function">constant</span><span class="token punctuation">(</span>safe-area-inset-left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">padding-right</span><span class="token punctuation">:</span> <span class="token function">constant</span><span class="token punctuation">(</span>safe-area-inset-right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">padding-bottom</span><span class="token punctuation">:</span> <span class="token function">constant</span><span class="token punctuation">(</span>safe-area-inset-bottom<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>来使页面内容不会超出安全区域。</p><p>这样我们就可以适配我们的页面了。</p><h3><span id="di-yi-chong-fang-an">第一种方案：</span><a href="#di-yi-chong-fang-an" class="header-anchor">#</a></h3><p>利用css3 <code>media</code> 属性来识别iphoneX设备：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@media</span> only screen and <span class="token punctuation">(</span><span class="token property">device-width</span><span class="token punctuation">:</span> 375px<span class="token punctuation">)</span> and <span class="token punctuation">(</span><span class="token property">device-height</span><span class="token punctuation">:</span> 812px<span class="token punctuation">)</span> and <span class="token punctuation">(</span><span class="token property">-webkit-device-pixel-ratio</span><span class="token punctuation">:</span> 3<span class="token punctuation">)</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>比如我们的footer便签的固定在页面底部的,这个时候我们就可以给footer(原高90px)多添加一下bottom高度(34px)：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@media</span> only screen and <span class="token punctuation">(</span><span class="token property">device-width</span><span class="token punctuation">:</span> 375px<span class="token punctuation">)</span> and <span class="token punctuation">(</span><span class="token property">device-height</span><span class="token punctuation">:</span> 812px<span class="token punctuation">)</span> and <span class="token punctuation">(</span><span class="token property">-webkit-device-pixel-ratio</span><span class="token punctuation">:</span> 3<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>    <span class="token selector">footer </span><span class="token punctuation">{</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">124</span>px<span class="token punctuation">;</span> // <span class="token number">90</span>px + <span class="token number">34</span>px    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果你用scss的话可以利用sass的mixin来处理：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@mixin</span> <span class="token function">iphoneX</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span> <span class="token punctuation">{</span>    <span class="token atrule"><span class="token rule">@media</span> only screen and <span class="token punctuation">(</span><span class="token property">device-width</span><span class="token punctuation">:</span> 375px<span class="token punctuation">)</span> and <span class="token punctuation">(</span><span class="token property">device-height</span><span class="token punctuation">:</span> 812px<span class="token punctuation">)</span> and <span class="token punctuation">(</span><span class="token property">-webkit-device-pixel-ratio</span><span class="token punctuation">:</span> 3<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>        @content    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@include</span> <span class="token function">iphoneX</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span> <span class="token punctuation">{</span>    <span class="token selector">footer </span><span class="token punctuation">{</span>        <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">124</span>px<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种方案不是很推荐，因为后面如果出现了同样操作模式的但是屏幕尺寸不同的其他iphone手机，就需要额外去弥补。</p><h3><span id="di-er-chong-fang-an">第二种方案</span><a href="#di-er-chong-fang-an" class="header-anchor">#</a></h3><p>利用 <code>calc</code> 来适配。<br>推荐使用这种方式，比较简单。</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">footer </span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token number">90</span>px + <span class="token function">constant</span><span class="token punctuation">(</span>safe-area-inset-bottom<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>个人比较推荐第二种方案，简单，而且能够自动适配横屏和竖屏的情况。</p><p>========================更新于 2017年12月12日========================</p><p>不得不说苹果真的是扯淡啊，刚出的新属性，结果在下一个系统小版本更新里就不再支持了，具体可以查看<a href="https://webkit.org/blog/7929/designing-websites-for-iphone-x/" target="_blank" rel="noopener">这里</a>，其中有这么一段话：</p><p><div class="tip">The env() function shipped in iOS 11 with the name constant(). Beginning with Safari Technology Preview 41 and the iOS 11.2 beta, constant() has been removed and replaced with env(). You can use the CSS fallback mechanism to support both versions, if necessary, but should prefer env() going forward.<br></div><br>所以从11.2开始就要使用<code>env</code>了，但是constant还是要兼容的，所以方案变成了下面这样：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">footer </span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token number">90</span>px + <span class="token function">constant</span><span class="token punctuation">(</span>safe-area-inset-bottom<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token number">90</span>px + <span class="token function">env</span><span class="token punctuation">(</span>safe-area-inset-bottom<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;嗯，苹果又出了一个屁奇怪的机型，需要前端同学们做适配了（神奇的机型）。&lt;/p&gt;
&lt;p&gt;默认情况下，iPhoneX的适配需要考虑到头部和底部的适配，但是一般来讲，很多app内的页面头部都是原生适配的，对于H5来说顶部的适配就不大需要考虑了（实际上适配思路和底部的适配是一致的）
      
    
    </summary>
    
      <category term="前端" scheme="http://happybug.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="前端适配" scheme="http://happybug.top/categories/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E9%80%82%E9%85%8D/"/>
    
    
      <category term="前端" scheme="http://happybug.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="string" scheme="http://happybug.top/tags/string/"/>
    
      <category term="字符串" scheme="http://happybug.top/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>节流与防抖</title>
    <link href="http://happybug.top/2017/10/10/debounce-throttle/"/>
    <id>http://happybug.top/2017/10/10/debounce-throttle/</id>
    <published>2017-10-10T07:21:31.000Z</published>
    <updated>2018-03-08T01:51:12.521Z</updated>
    
    <content type="html"><![CDATA[<p>函数的<code>节流</code>与<code>防抖</code>在日常的开发中会经常的使用到，下面我们就来看下这两个概念。</p><h2><span id="jie-liu-throttle">节流 throttle</span><a href="#jie-liu-throttle" class="header-anchor">#</a></h2><p>概念：每间隔固定的时间就去执行某个函数。</p><p>场景：一个商品列表，图片懒加载，在用户滚动页面的时候，再加载要进入到屏幕中的图片。</p><p>这个场景中，用户不断滚动页面，就需要我们不断的加载图片，这个场景就适合我们用节流来进行优化。</p><p>简单实现：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> throttle <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>fn<span class="token punctuation">,</span> delay<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> last <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> last <span class="token operator">></span> delay<span class="token punctuation">)</span> <span class="token punctuation">{</span>            fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>            last <span class="token operator">=</span> curr<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="fang-dou-debounce">防抖 debounce</span><a href="#fang-dou-debounce" class="header-anchor">#</a></h2><p>概念：如果在固定的时间内一直被调用，就不会触发该方法，直到超过固定时间后才会触发。</p><p>场景：乘坐电梯时，乘客一直在往电梯内进入的状态下，电梯门是不会关闭的，直到没有乘客进入后，电梯门才会关闭。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> debounce <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>idle<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> last  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> ctx <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">,</span> args <span class="token operator">=</span> arguments    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>last<span class="token punctuation">)</span>    last <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        action<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> args<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> idle<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>节流和防抖主要核心代码都是利用了<code>setTimeout</code>实现的，有兴趣的可以查看 <a href="http://www.cnblogs.com/fsjohnhuang/p/4147810.html" target="_blank" rel="noopener">JS魔法堂：函数节流（throttle）与函数去抖（debounce）</a> 这篇文章中有较详细的分析了underscore中 节流和防抖的实现。大家可以直接用underscore或者lodash中的节流和防抖函数。</p><p>参考：<br><a href="http://www.cnblogs.com/fsjohnhuang/p/4147810.html" target="_blank" rel="noopener">JS魔法堂：函数节流（throttle）与函数去抖（debounce）</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;函数的&lt;code&gt;节流&lt;/code&gt;与&lt;code&gt;防抖&lt;/code&gt;在日常的开发中会经常的使用到，下面我们就来看下这两个概念。&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;jie-liu-throttle&quot;&gt;节流 throttle&lt;/span&gt;&lt;a href=&quot;#jie-liu-t
      
    
    </summary>
    
      <category term="util" scheme="http://happybug.top/categories/util/"/>
    
    
      <category term="节流" scheme="http://happybug.top/tags/%E8%8A%82%E6%B5%81/"/>
    
      <category term="防抖" scheme="http://happybug.top/tags/%E9%98%B2%E6%8A%96/"/>
    
  </entry>
  
  <entry>
    <title>vscode中vue文件emmet进行tab不起作用</title>
    <link href="http://happybug.top/2017/10/09/vscode-vue-emmet/"/>
    <id>http://happybug.top/2017/10/09/vscode-vue-emmet/</id>
    <published>2017-10-09T09:33:13.000Z</published>
    <updated>2018-03-08T01:51:12.524Z</updated>
    
    <content type="html"><![CDATA[<p>vscode中中开发vue项目时，用到的.vue文件中，emmet的自动补全功能会失效，这时你需要在vscode中的：文件-首选项-设置，里添加</p><pre><code>&quot;emmet.triggerExpansionOnTab&quot;: true,&quot;emmet.includeLanguages&quot;: {    &quot;vue-html&quot;: &quot;html&quot;,    &quot;vue&quot;: &quot;html&quot;}</code></pre><p>这样就可以正常使用emmet了。</p><p>参考：<a href="https://segmentfault.com/q/1010000008680303/a-1020000008680726" target="_blank" rel="noopener">https://segmentfault.com/q/1010000008680303/a-1020000008680726</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;vscode中中开发vue项目时，用到的.vue文件中，emmet的自动补全功能会失效，这时你需要在vscode中的：文件-首选项-设置，里添加&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;emmet.triggerExpansionOnTab&amp;quot;: true,
&amp;q
      
    
    </summary>
    
      <category term="vscode" scheme="http://happybug.top/categories/vscode/"/>
    
      <category term="vue" scheme="http://happybug.top/categories/vscode/vue/"/>
    
      <category term="emmet" scheme="http://happybug.top/categories/vscode/vue/emmet/"/>
    
    
  </entry>
  
  <entry>
    <title>图片预加载与懒加载</title>
    <link href="http://happybug.top/2017/09/26/imageLoad/"/>
    <id>http://happybug.top/2017/09/26/imageLoad/</id>
    <published>2017-09-26T06:36:20.000Z</published>
    <updated>2018-03-08T01:51:12.523Z</updated>
    
    <content type="html"><![CDATA[<p>我们在项目开发过程中，经常有预加载或者懒加载的需求，今天我们就来分析一下，图片预加载与懒加载。</p><h2><span id="tu-pian-de-jia-zai">图片的加载</span><a href="#tu-pian-de-jia-zai" class="header-anchor">#</a></h2><p>我们可以通过多种方式来加载图片，比如：html中img标签，css中background以及js中的<code>new Image</code>等方式，今天我们的主要方式就是js中的<code>new Image</code>的方式。<code>new Image</code>的方式实际上等价于<code>document.createElement(&#39;img&#39;)</code></p><p>先看下语法：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">Image</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>width、height就是指定图片的宽高。</p><p>Image对象的实例有很多属性，其中比较常用的有：<br>width: 图片的渲染宽度<br>height: 图片的渲染高度<br>naturalWidth: 图片的实际宽度<br>naturalHeight: 图片的实际高度<br>complete: 只读属性，返回一个 Boolean 如果浏览器已经取出图像则返回true, 并且它是一个 supported image type,图像解码的过程中没有错误.</p><p>Image对象还有三个事件函数：<br>onabort: 当用户放弃图像的装载时调用的事件句柄。<br>onerror: 在装载图像的过程中发生错误时调用的事件句柄。<br>onload: 当图像装载完毕时调用的事件句柄。</p><h2><span id="shi-xian-yi-ge-jian-dan-de-tu-pian-jia-zai">实现一个简单的图片加载</span><a href="#shi-xian-yi-ge-jian-dan-de-tu-pian-jia-zai" class="header-anchor">#</a></h2><p>有了以上Image的知识，我们来实现一个简单的图片加载就比较容易了。<br>首先你可以new 一个 Image对象，然后给Image对象添加src属性，然后就利用onload的事件函数就可以加载图片了。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">loadImage</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> image <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    image<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'图片加载完成了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cb <span class="token operator">&amp;&amp;</span> cb<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    image<span class="token punctuation">.</span>src <span class="token operator">=</span> url<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>image<span class="token punctuation">.</span>complete<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cb <span class="token operator">&amp;&amp;</span> cb<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">;</span>        image<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">loadImage</span><span class="token punctuation">(</span><span class="token string">'http://img6.bdstatic.com/img/image/pcindex/tongmengpctufanbingbing.jpg'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'width: '</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>width<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'naturalWidth: '</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>naturalWidth<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样一个简单的图片加载就完成了，当然这个方法是有局限性的，并不能支持多图加载，只能一张，有兴趣的话，可以自行改造一下，其实添加一个循环就可以了。</p><p>其实想说的并不是这种方式，这种方式想必大家都会，也不用我多说，哈哈哈！</p><h2><span id="gao-duan-wan-fa-yi-ji-si-kao">高端玩法以及思考</span><a href="#gao-duan-wan-fa-yi-ji-si-kao" class="header-anchor">#</a></h2><p>这种方法不是我发明的，是从<a href="http://www.codeweblog.com/%E6%AF%94onload%E6%9B%B4%E5%BF%AB%E8%8E%B7%E5%8F%96%E5%9B%BE%E7%89%87%E5%B0%BA%E5%AF%B8/" target="_blank" rel="noopener">这里</a>学习来的。<br><a href="https://gist.github.com/hehongwei44/5ab040cf3a8b27311d72" target="_blank" rel="noopener">gist地址</a></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 更新：</span><span class="token comment" spellcheck="true">// 05.27: 1、保证回调执行顺序：error > ready > load；2、回调函数this指向img本身</span><span class="token comment" spellcheck="true">// 04-02: 1、增加图片完全加载后的回调 2、提高性能</span><span class="token comment" spellcheck="true">/** * 图片头数据加载就绪事件 - 更快获取图片尺寸 * @version    2011.05.27 * @author    TangBin（PS:我不是作者，我只是代码的搬运工） * @see        http://www.planeart.cn/?p=1121 * @param    {String}    图片路径 * @param    {Function}    尺寸就绪 * @param    {Function}    加载完毕 (可选) * @param    {Function}    加载错误 (可选) * @example imgReady('http://www.google.com.hk/intl/zh-CN/images/logo_cn.png', function () {        alert('size ready: width=' + this.width + '; height=' + this.height);    }); */</span><span class="token keyword">var</span> imgReady <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/*list用来存放onready的函数队列,intervalID用来存放定时器的引用*/</span>    <span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> intervalId <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 用来执行队列</span>    tick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">/*end用来表示onready函数是否执行完必，splice用来删除队列中的项目*/</span>            list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>end <span class="token operator">?</span> list<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//队列全部执行完成后的清除工作。</span>        <span class="token operator">!</span>list<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 停止所有定时器队列,释放内存中的引用</span>    stop <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">clearInterval</span><span class="token punctuation">(</span>intervalId<span class="token punctuation">)</span><span class="token punctuation">;</span>        intervalId <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**  * 闭包  * @param:url  图片的路径  * @param:ready 图片尺寸就绪的回调函数  * @param: load 图片加载完毕的回调函数  * @param: err 图片加载出错的回调函数  *  */</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>url<span class="token punctuation">,</span> ready<span class="token punctuation">,</span> load<span class="token punctuation">,</span> error<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> onready<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">,</span> newWidth<span class="token punctuation">,</span> newHeight<span class="token punctuation">,</span>              img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        img<span class="token punctuation">.</span>src <span class="token operator">=</span> url<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果图片被缓存，则直接返回缓存数据</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>img<span class="token punctuation">.</span>complete<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ready<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>            load <span class="token operator">&amp;&amp;</span> load<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        width <span class="token operator">=</span> img<span class="token punctuation">.</span>width<span class="token punctuation">;</span>        height <span class="token operator">=</span> img<span class="token punctuation">.</span>height<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 加载错误后的事件</span>        img<span class="token punctuation">.</span>onerror <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            error <span class="token operator">&amp;&amp;</span> error<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>            onready<span class="token punctuation">.</span>end <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            img <span class="token operator">=</span> img<span class="token punctuation">.</span>onload <span class="token operator">=</span> img<span class="token punctuation">.</span>onerror <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 图片尺寸就绪</span>        onready <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            newWidth <span class="token operator">=</span> img<span class="token punctuation">.</span>width<span class="token punctuation">;</span>            newHeight <span class="token operator">=</span> img<span class="token punctuation">.</span>height<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>newWidth <span class="token operator">!==</span> width <span class="token operator">||</span> newHeight <span class="token operator">!==</span> height <span class="token operator">||</span>                <span class="token comment" spellcheck="true">// 如果图片已经在其他地方加载可使用面积检测</span>                newWidth <span class="token operator">*</span> newHeight <span class="token operator">></span> <span class="token number">1024</span>            <span class="token punctuation">)</span> <span class="token punctuation">{</span>                ready<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>                onready<span class="token punctuation">.</span>end <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">onready</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 完全加载完毕的事件</span>        img<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// onload在定时器时间差范围内可能比onready快</span>            <span class="token comment" spellcheck="true">// 这里进行检查并保证onready优先执行</span>            <span class="token operator">!</span>onready<span class="token punctuation">.</span>end <span class="token operator">&amp;&amp;</span> <span class="token function">onready</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            load <span class="token operator">&amp;&amp;</span> load<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// IE gif动画会循环执行onload，置空onload即可</span>            img <span class="token operator">=</span> img<span class="token punctuation">.</span>onload <span class="token operator">=</span> img<span class="token punctuation">.</span>onerror <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 加入队列中定期执行</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onready<span class="token punctuation">.</span>end<span class="token punctuation">)</span> <span class="token punctuation">{</span>            list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>onready<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 无论何时只允许出现一个定时器，减少浏览器性能损耗</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>intervalId <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> intervalId <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span>tick<span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码在社区中感觉存在的挺多的，在各种图预加载中被使用，据说是腾讯大牛写的。这段代码的精妙之处在于制作了一个定时器，并在定时器内对图片进行了面积检测，当检测到宽高积大于某个值的时候，就认为图片尺寸准备好了，相应的就会触发ready方法。</p><pre class="line-numbers language-javascript"><code class="language-javascript">onready <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    newWidth <span class="token operator">=</span> img<span class="token punctuation">.</span>width<span class="token punctuation">;</span>    newHeight <span class="token operator">=</span> img<span class="token punctuation">.</span>height<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newWidth <span class="token operator">!==</span> width <span class="token operator">||</span> newHeight <span class="token operator">!==</span> height <span class="token operator">||</span>        <span class="token comment" spellcheck="true">// 如果图片已经在其他地方加载可使用面积检测</span>        newWidth <span class="token operator">*</span> newHeight <span class="token operator">></span> <span class="token number">1024</span>    <span class="token punctuation">)</span> <span class="token punctuation">{</span>        ready<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>        onready<span class="token punctuation">.</span>end <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>面积检测的逻辑就在这段代码中，至于为什么是1024，可能是程序员的执着吧，哈哈哈！ </p><p>这个想法我个人还是很佩服的，大神就是大神。</p><p>但是，这里想要说明一下的是：<br>虽然上述例子中推荐的方法是这样的：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">imgReady</span><span class="token punctuation">(</span><span class="token string">'http://www.google.com.hk/intl/zh-CN/images/logo_cn.png'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'size ready: width='</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">+</span> <span class="token string">'; height='</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>但是 这种方式作者的意图在于能够比onload更提前的获取到图片的尺寸值，而不是完全加载完图片，完全加载完图片还是需要在load函数中调用，像这样：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">imgReady</span><span class="token punctuation">(</span><span class="token string">'http://www.google.com.hk/intl/zh-CN/images/logo_cn.png'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'size ready: width='</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">+</span> <span class="token string">'; height='</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>两种方式都可以，但是还是需要结合自己的业务场景来使用，比如，上述代码使用到商品列表中，个人建议使用第一种方式即传入ready函数，但是如果你是h5的小游戏，需要提前加载图片资源的话，个人建议使用第二种方式即传入load函数，ready可以传入一个空函数，或者你也可以改造一下上述代码，使得ready可以传null。</p><h2><span id="gai-zao-cheng-ke-yi-chuan-ru-tu-pian-shu-zu-de-fang-shi">改造成可以传入图片数组的方式</span><a href="#gai-zao-cheng-ke-yi-chuan-ru-tu-pian-shu-zu-de-fang-shi" class="header-anchor">#</a></h2><p>创建一个js文件，名叫：imageLoad.js</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> imgReady <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> intervalId <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 用来执行队列</span>    tick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>end <span class="token operator">?</span> list<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token operator">!</span>list<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 停止所有定时器队列</span>    stop <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">clearInterval</span><span class="token punctuation">(</span>intervalId<span class="token punctuation">)</span><span class="token punctuation">;</span>        intervalId <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>url<span class="token punctuation">,</span> ready<span class="token punctuation">,</span> load<span class="token punctuation">,</span> error<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> onready<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">,</span> newWidth<span class="token punctuation">,</span> newHeight<span class="token punctuation">,</span>            img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        img<span class="token punctuation">.</span>src <span class="token operator">=</span> url<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果图片被缓存，则直接返回缓存数据</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>img<span class="token punctuation">.</span>complete<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ready<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>            load <span class="token operator">&amp;&amp;</span> load<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">;</span>        width <span class="token operator">=</span> img<span class="token punctuation">.</span>width<span class="token punctuation">;</span>        height <span class="token operator">=</span> img<span class="token punctuation">.</span>height<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 加载错误后的事件</span>        img<span class="token punctuation">.</span>onerror <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            error <span class="token operator">&amp;&amp;</span> error<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>            onready<span class="token punctuation">.</span>end <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            img <span class="token operator">=</span> img<span class="token punctuation">.</span>onload <span class="token operator">=</span> img<span class="token punctuation">.</span>onerror <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 图片尺寸就绪</span>        onready <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            newWidth <span class="token operator">=</span> img<span class="token punctuation">.</span>width<span class="token punctuation">;</span>            newHeight <span class="token operator">=</span> img<span class="token punctuation">.</span>height<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>newWidth <span class="token operator">!==</span> width <span class="token operator">||</span> newHeight <span class="token operator">!==</span> height <span class="token operator">||</span>                <span class="token comment" spellcheck="true">// 如果图片已经在其他地方加载可使用面积检测</span>                newWidth <span class="token operator">*</span> newHeight <span class="token operator">></span> <span class="token number">1024</span>                <span class="token punctuation">)</span> <span class="token punctuation">{</span>                ready <span class="token operator">&amp;&amp;</span> ready<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>                onready<span class="token punctuation">.</span>end <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">onready</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 完全加载完毕的事件</span>        img<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// onload在定时器时间差范围内可能比onready快</span>            <span class="token comment" spellcheck="true">// 这里进行检查并保证onready优先执行</span>            <span class="token operator">!</span>onready<span class="token punctuation">.</span>end <span class="token operator">&amp;&amp;</span> <span class="token function">onready</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            load <span class="token operator">&amp;&amp;</span> load<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// IE gif动画会循环执行onload，置空onload即可</span>            img <span class="token operator">=</span> img<span class="token punctuation">.</span>onload <span class="token operator">=</span> img<span class="token punctuation">.</span>onerror <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 加入队列中定期执行</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onready<span class="token punctuation">.</span>end<span class="token punctuation">)</span> <span class="token punctuation">{</span>            list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>onready<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 无论何时只允许出现一个定时器，减少浏览器性能损耗</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>intervalId <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> intervalId <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span>tick<span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 导出一个对象</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**    * 加载函数    * @param: imgs  图片的路径的数组    * @param: onComplete 所有图片都加载过的回调    * @param: onReady 每张图片可以获取大小时候的回调    * @param: isReady 是否启用ready函数，默认false。如果此值传true，那么onReady会在每张图能够获取到尺寸的时候触发；如果传false或者不传，onReady会在每张图loaded的时候触发    */</span>    load<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>imgs<span class="token punctuation">,</span> onComplete<span class="token punctuation">,</span> onReady<span class="token punctuation">,</span> isReady<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> onComplete <span class="token operator">=</span> onComplete <span class="token operator">||</span> <span class="token keyword">function</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span>imgs<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> onReady <span class="token operator">=</span> onReady <span class="token operator">||</span> <span class="token keyword">function</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>img<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> tmpFunc <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> isReady <span class="token operator">=</span> isReady <span class="token operator">||</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> loaded <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> error <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> imgs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">var</span> n <span class="token operator">=</span> n<span class="token punctuation">;</span>                <span class="token keyword">var</span> loadFunc <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token operator">++</span>loaded<span class="token punctuation">;</span>                    onReady <span class="token operator">&amp;&amp;</span> <span class="token function">onReady</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> imgs<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>loaded <span class="token operator">+</span> error <span class="token operator">>=</span> imgs<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>                        onComplete <span class="token operator">&amp;&amp;</span> <span class="token function">onComplete</span><span class="token punctuation">(</span>loaded<span class="token punctuation">,</span>imgs<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token function">imgReady</span><span class="token punctuation">(</span>imgs<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">,</span>                    isReady <span class="token operator">?</span> loadFunc <span class="token punctuation">:</span> tmpFunc<span class="token punctuation">,</span>                    isReady <span class="token operator">?</span> tmpFunc <span class="token punctuation">:</span> loadFunc<span class="token punctuation">,</span>                    <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token operator">++</span> error<span class="token punctuation">;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>error <span class="token operator">+</span> loaded <span class="token operator">>=</span> imgs<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            onComplete <span class="token operator">&amp;&amp;</span> <span class="token function">onComplete</span><span class="token punctuation">(</span>loaded<span class="token punctuation">,</span>imgs<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用方式</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> imgLoad <span class="token keyword">from</span> <span class="token string">'imageLoad.js'</span><span class="token punctuation">;</span>imgLoad<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'http://img6.bdstatic.com/img/image/pcindex/tongmengpctufanbingbing.jpg'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>url<span class="token punctuation">,</span>img<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'size ready: width='</span> <span class="token operator">+</span> img<span class="token punctuation">.</span>width <span class="token operator">+</span> <span class="token string">'; height='</span> <span class="token operator">+</span> img<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样我们就可以一次加载多张图片了。</p><h2><span id="tu-pian-yu-jia-zai">图片预加载</span><a href="#tu-pian-yu-jia-zai" class="header-anchor">#</a></h2><p>预加载的话其实已经没有什么可说的了，使用上述方法在图片展示之前加载图片就好。</p><h2><span id="tu-pian-lan-jia-zai">图片懒加载</span><a href="#tu-pian-lan-jia-zai" class="header-anchor">#</a></h2><p>图片懒加载的方式可以说和上述内容就没有太多关系了。</p><p>图片懒加载的技术点主要在：监听页面滚动、判断元素是否出现在屏幕内。</p><h3><span id="jian-ting-ye-mian-gun-dong">监听页面滚动</span><a href="#jian-ting-ye-mian-gun-dong" class="header-anchor">#</a></h3><p>监听页面滚动只需要<code>window.addEventListener(&#39;scroll&#39;, function() {})</code>就可以了。但是这个过程是可以优化的。<br>具体怎么优化呢？我们就需要用到：节流。 概念可以查看<a href="http://happybug.top/2017/10/10/debounce-throttle/">这里</a></p><h3><span id="pan-duan-yuan-su-shi-fou-chu-xian-zai-ping-mu-nei">判断元素是否出现在屏幕内</span><a href="#pan-duan-yuan-su-shi-fou-chu-xian-zai-ping-mu-nei" class="header-anchor">#</a></h3><p>1、通过scrollTop来判断</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> ele <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ele<span class="token punctuation">.</span>offsetTop <span class="token operator">-</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop <span class="token operator">&lt;</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 这里元素就在可视区域内</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2、getBoundingClientRect()<br>getBoundingClientRect用于获取页面中某个元素相对于浏览器可视范围的上、右、下、左的距离。</p><p><div class="tip">注意：这个方法获取的距离是相对于浏览器左边界和上边界的。如下图所示</div><br><img src="https://mdn.mozillademos.org/files/15087/rect.png" alt="https://mdn.mozillademos.org/files/15087/rect.png"></p><p>这个方法的兼容性还是很好的，在大多数的浏览器下至少会返回6个参数：top,right,bottom,left,width,height(IE 下没有width、height属性)。<br>IE没有宽度高度属性，如果你需要用IE下用到这个方法的话，可以利用<code>getBoundingClientRect().right-getBoundingClientRect().left</code>的方式来获取宽度，高度只需用bottom减去top就可以了。<br>那么我们同样可以利用这个方法来判断元素是否出现在屏幕内。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 是否进入到屏幕内（只判断了垂直方向）</span><span class="token keyword">function</span> <span class="token function">isIntoViewport</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> rect <span class="token operator">=</span> ele<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> clientHeight <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span>    <span class="token keyword">return</span> ele<span class="token punctuation">.</span>top <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> ele<span class="token punctuation">.</span>top <span class="token operator">&lt;=</span> clientHeight<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上方法可能和你在其他地方看到的思路不一样，是因为我们在这里的应用场景是判断元素进入到页面的时候，而不是元素完全在页面内。</p><p>3、IntersectionObserver</p><p>这个API的兼容性不是很好，具体可以查看<a href="http://caniuse.com/#search=intersection" target="_blank" rel="noopener">这里</a><br>你可以像这样初始化一个IntersectionObserver</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 初始化某个元素</span><span class="token keyword">var</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntersectionObserver</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>entries<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>entries<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    root<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>    threshold<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    rootMargin<span class="token punctuation">:</span> <span class="token string">"50px 0px"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> ele <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 开始观察某个元素，一个observer可以观察多个element</span>observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 停止观察</span>observer<span class="token punctuation">.</span><span class="token function">unobserve</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 关闭观察器</span>observer<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>IntersectionObserver 接收两个参数：<br><code>callback</code>: 回调函数，该回调函数接收一个参数entries，这个参数是个数组，当前的oserver监听几个元素，这个数组的长度就是几。<br>        entries中的每一个元素都是一个IntersectionObserverEntry对象，大概长这样：</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    time<span class="token operator">:</span> <span class="token number">3893.92</span><span class="token punctuation">,</span>    rootBounds<span class="token operator">:</span> ClientRect <span class="token punctuation">{</span>        bottom<span class="token operator">:</span> <span class="token number">920</span><span class="token punctuation">,</span>        height<span class="token operator">:</span> <span class="token number">1024</span><span class="token punctuation">,</span>        left<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        right<span class="token operator">:</span> <span class="token number">1024</span><span class="token punctuation">,</span>        top<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        width<span class="token operator">:</span> <span class="token number">920</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    boundingClientRect<span class="token operator">:</span> ClientRect <span class="token punctuation">{</span>        // ...    <span class="token punctuation">}</span><span class="token punctuation">,</span>    intersectionRect<span class="token operator">:</span> ClientRect <span class="token punctuation">{</span>        // ...    <span class="token punctuation">}</span><span class="token punctuation">,</span>    intersectionRatio<span class="token operator">:</span> <span class="token number">0.54</span><span class="token punctuation">,</span>    target<span class="token operator">:</span> element<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每个属性的含义如下：</p><pre class="line-numbers language-html"><code class="language-html">time：可见性发生变化的时间，是一个高精度时间戳，单位为毫秒target：被观察的目标元素，是一个 DOM 节点对象rootBounds：根元素的矩形区域的信息，getBoundingClientRect()方法的返回值，如果没有根元素（即直接相对于视口滚动），则返回nullboundingClientRect：目标元素的矩形区域的信息intersectionRect：目标元素与视口（或根元素）的交叉区域的信息intersectionRatio：目标元素的可见比例，即intersectionRect占boundingClientRect的比例，完全可见时为1，完全不可见时小于等于0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>options</code>: 这个参数是一个对象，可能的参数有：</p><p><code>threshold</code>: 数组，默认[0]，数组中参数形式都是0-1之间的小数，表示元素的可见范围。这个参数用于规定当前元素在可见多少范围时可见触发回调，例如传入[0,0.25,0.5,0.75,1]时，表示当前元素0%，25%，50%,75%,100%可见时，会触发回调函数。</p><p><code>root</code>: Element类型的元素，如：document.querySelector(‘#img’)， 指定目标元素所在的容器节点（即根元素）。注意，容器元素必须是目标元素的祖先节点。</p><p><code>rootMargin</code>: 用来扩展或缩小rootBounds这个矩形的大小，从而影响intersectionRect交叉区域的大小。它使用CSS的定义方法，比如10px 20px 30px 40px，表示 top、right、bottom 和 left 四个方向的值。</p><p>所以如果用IntersectionObserver来判断元素是否出现在屏幕内的话：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntersectionObserver</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>entries<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'将要进入屏幕内'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 可以在这里循环entries判断是否是ele元素，并停止该元素的observer</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">var</span> ele <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://github.com/ApoorvSaxena/lozad.js" target="_blank" rel="noopener">这里</a>有一个完全利用IntersectionObserver API实现的懒加载的库，有兴趣的可以阅读下。</p><p>本来想自己实现一个图片懒加载的，后来想想没必要造那么多轮子，何况自己写的确实不如人家写的好，就不献丑了。这个放一个我时常用的一个懒加载的库：<a href="https://github.com/toddmotto/echo" target="_blank" rel="noopener">https://github.com/toddmotto/echo</a></p><p>参考：<br><a href="http://www.codeweblog.com/%E6%AF%94onload%E6%9B%B4%E5%BF%AB%E8%8E%B7%E5%8F%96%E5%9B%BE%E7%89%87%E5%B0%BA%E5%AF%B8/" target="_blank" rel="noopener">比onload更快获取图片尺寸</a><br><a href="http://www.ruanyifeng.com/blog/2016/11/intersectionobserver_api.html" target="_blank" rel="noopener">IntersectionObserver API 使用教程</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们在项目开发过程中，经常有预加载或者懒加载的需求，今天我们就来分析一下，图片预加载与懒加载。&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;tu-pian-de-jia-zai&quot;&gt;图片的加载&lt;/span&gt;&lt;a href=&quot;#tu-pian-de-jia-zai&quot; class=&quot;he
      
    
    </summary>
    
      <category term="图片加载" scheme="http://happybug.top/categories/%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD/"/>
    
    
      <category term="图片" scheme="http://happybug.top/tags/%E5%9B%BE%E7%89%87/"/>
    
      <category term="预加载" scheme="http://happybug.top/tags/%E9%A2%84%E5%8A%A0%E8%BD%BD/"/>
    
      <category term="懒加载" scheme="http://happybug.top/tags/%E6%87%92%E5%8A%A0%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>如何实现一个简单的移动端Vue Confirm组件</title>
    <link href="http://happybug.top/2017/09/19/vue-component/"/>
    <id>http://happybug.top/2017/09/19/vue-component/</id>
    <published>2017-09-19T05:19:23.000Z</published>
    <updated>2019-09-15T06:49:43.833Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#shi-me-shi-zu-jian">什么是组件</a></li><li><a href="#vue-zu-jian">Vue组件</a></li><li><a href="#shi-xian-yi-ge-confirm-zu-jian">实现一个Confirm组件</a><ul><li><a href="#1-shou-xian-wo-men-xu-yao-chuang-jian-html-yuan-su">1、首先，我们需要创建html元素</a></li><li><a href="#2-xie-yang-shi">2、写样式</a></li><li><a href="#3-zu-jian-de-js">3、组件的js</a></li><li><a href="#4-jiang-html-yu-js-lian-he-qi-lai">4、将HTML与js联合起来</a></li><li><a href="#5-zai-qi-ta-zu-jian-zhong-yin-yong-confirm-zu-jian">5、在其他组件中引用Confirm组件</a></li></ul></li><li><a href="#gei-zu-jian-tian-jia-dong-hua">给组件添加动画</a></li><li><a href="#xiao-guo-yan-shi">效果演示</a></li><li><a href="#qi-ta-si-kao">其他思考</a></li></ul><!-- tocstop --></div><h2><span id="shi-me-shi-zu-jian">什么是组件</span><a href="#shi-me-shi-zu-jian" class="header-anchor">#</a></h2><p>百度百科的定义是：组件（Component）是对数据和方法的简单封装。<br>定义说明了组件的两个主要功能：数据和方法。对于软件开发而言，组件应该是服务于具体的业务逻辑，但是又和具体的业务逻辑没有直接关系的代码段。也就是说，组件是来源于实际业务需求，但高于业务需求的。一般来讲，组件可以接受用户的输入（这里的输入不一定是input的输入，可以理解成参数传入。），在经过一些处理之后将处理之后的结果反馈到用户面前。</p><h2><span id="vue-zu-jian">Vue组件</span><a href="#vue-zu-jian" class="header-anchor">#</a></h2><div class="tip">如果你对Vue的组件已经很熟悉了，可以直接跳过该部分，以下内容全部来自官网</div><p>Vue官方文章的解释：</p><blockquote><p>组件 (Component) 是 Vue.js 最强大的功能之一。组件可以扩展 HTML 元素，封装可重用的代码。在较高层面上，组件是自定义元素，Vue.js 的编译器为它添加特殊功能。在有些情况下，组件也可以是原生 HTML 元素的形式，以 is 特性扩展。</p></blockquote><p>具体请参考<a href="https://cn.vuejs.org/v2/guide/components.html" target="_blank" rel="noopener">vue中文文档</a></p><p>这里对Vue组件简单回顾一下：<br>1、Vue组件可以采用全局注册和局部注册的形式，</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 全局注册</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'my-component'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  template<span class="token punctuation">:</span> <span class="token string">'&lt;div>A custom component!&lt;/div>'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> data  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 局部注册</span><span class="token keyword">var</span> Child <span class="token operator">=</span> <span class="token punctuation">{</span>  template<span class="token punctuation">:</span> <span class="token string">'&lt;div>A custom component!&lt;/div>'</span><span class="token punctuation">}</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// &lt;my-component> 将只在父模板可用</span>    <span class="token string">'my-component'</span><span class="token punctuation">:</span> Child  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、data必须是函数 <a href="https://cn.vuejs.org/v2/guide/components.html#data-必须是函数" target="_blank" rel="noopener">官网参考</a><br>data必须是函数，原因也很简单，使用函数是为了保证多个组件之间的数据相互独立，不共享。</p><p>3、props数据传递<br>你可以props从父组件向子组件传递信息，例如：<br>创建子组件，在子组件中利用props接收参数message</p><pre class="line-numbers language-javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'child'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 声明 props</span>  props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'message'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 就像 data 一样，prop 可以用在模板内</span>  <span class="token comment" spellcheck="true">// 同样也可以在 vm 实例中像“this.message”这样使用</span>  template<span class="token punctuation">:</span> <span class="token string">'&lt;span>{{ message }}&lt;/span>'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在父组件中，调用子组件时：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 传递静态定值</span><span class="token operator">&lt;</span>child message<span class="token operator">=</span><span class="token string">"hello"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>child<span class="token operator">></span> <span class="token comment" spellcheck="true">// 传递动态变量值 hello是个变量</span><span class="token operator">&lt;</span>child <span class="token punctuation">:</span>message<span class="token operator">=</span><span class="token string">"hello"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>child<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当然你还可以在子组件中设置props的值，参考<a href="https://cn.vuejs.org/v2/guide/components.html#Prop-验证" target="_blank" rel="noopener">这里</a></p><p>4、自定义事件<br>在父组件中使用 $on(eventName) 监听事件<br>在子组件中使用 $emit(eventName) 触发事件</p><p>Vue组件中还有很多其他概念，比如动态组件、组件v-model、slot、异步组件、递归组件等等，如果需要了解这些内容，可以查看官方网站。</p><h2><span id="shi-xian-yi-ge-confirm-zu-jian">实现一个Confirm组件</span><a href="#shi-xian-yi-ge-confirm-zu-jian" class="header-anchor">#</a></h2><p>这个Confirm组件，模拟浏览器中的Confirm的行为：标题，内容，确定和取消按钮，样式模拟一下ios的样式。</p><p>这个组件的形式还是比较简单的，就是根据输入，显示相关信息，并在用户点击了确定和取消按钮的时候，做出相应的反应。</p><p>那么接下来我们就需要看下这个组件都要接收哪些参数了：<br>1、title:标题文字<br>2、content:提示内容<br>3、cancelText:取消按钮文字内容，默认“取消”<br>4、cancelFunc: 取消按钮的回调<br>5、confirmText: 确定按钮， 默认“确定”<br>6、confirmFunc: 确定按钮的回调</p><p>那么接下来就我们一步一步的实现一个Confirm组件，我们会按照<code>.vue</code>文件的形式进行这个组件的开发，并命名为<code>confirm.vue</code></p><h3><span id="1-shou-xian-wo-men-xu-yao-chuang-jian-html-yuan-su">1、首先，我们需要创建html元素</span><a href="#1-shou-xian-wo-men-xu-yao-chuang-jian-html-yuan-su" class="header-anchor">#</a></h3><p>html元素大致分为几层：</p><blockquote><ul><li>最外层的包装层 （可以理解为一个外层容器）</li><li>半透明的背景层 （可以用于点击背景弹层消失）</li><li>主体内容部分   （正常的需要展示的内容）</li></ul></blockquote><p>其中<code>主体内容部分</code>又可以分为：</p><blockquote><ul><li>标题区域</li><li>内容提示区域</li><li>按钮区域</li></ul></blockquote><p>按照上述的规划，页面元素可以这样写(按照.vue文件的形式，html需要放在template标签之内)：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>confirm-pop-container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>confirm-pop-bg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>confirm-pop-main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>confirm-pop-title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>confirm-pop-content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>提示内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>confirm-pop-footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>confirm-pop-btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>取消<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>confirm-pop-btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>确定<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>页面的HTML结构大致是这样的：</p><p>section.confirm-pop-container : 最外层包装层<br>    section.confirm-pop-bg : 半透明的背景层<br>    section.confirm-pop-main : 主体内容部分<br>        div.confirm-pop-title : 标题区域<br>        div.confirm-pop-content : 内容提示区域<br>        div.confirm-pop-footer : 按钮区域<br>            div.confirm-pop-btn : 分别代表两个按钮</p><p>这样我们页面的大致结构就已经有了，接下来我们可以根据结构来写样式了</p><h3><span id="2-xie-yang-shi">2、写样式</span><a href="#2-xie-yang-shi" class="header-anchor">#</a></h3><p>样式部分我用的scss写的，这部分没什么特别的，就是正常写样式就可以了。<br>在<code>.vue</code>文件中，样式需要添加到style标签中，如下所示：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scss<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><iframe width="100%" height="300" src="//jsfiddle.net/Michael_Gong/oznqcz6p/embedded/css,html/" allowfullscreen="allowfullscreen" frameborder="0"></iframe><p>样式添加完成后，confirm弹出框的样子(html中确定按钮添加了其他样式)：<br><img src="/images/confirm.jpg" alt="仓库"></p><p>这样就是confirm样式就暂时完成了。</p><h3><span id="3-zu-jian-de-js">3、组件的js</span><a href="#3-zu-jian-de-js" class="header-anchor">#</a></h3><p>静态的组件我们现在已经完成了，现在就可以给组件添加js逻辑了，让我们的组件动起来。<br>按照<code>.vue</code>组件的形式，我们需要往script标签添加如下代码：</p><iframe width="100%" height="300" src="//jsfiddle.net/Michael_Gong/oznqcz6p/embedded/js/" allowfullscreen="allowfullscreen" frameborder="0"></iframe><h3><span id="4-jiang-html-yu-js-lian-he-qi-lai">4、将HTML与js联合起来</span><a href="#4-jiang-html-yu-js-lian-he-qi-lai" class="header-anchor">#</a></h3><p>这样添加的话，我们的页面依旧没有和js联系起来，所以还需要在html添加事件监听，代码如下：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>confirm-pop-btn<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btnActionHandler(<span class="token punctuation">'</span>cancel<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>取消<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>confirm-pop-btn confirm-pop-btn-border blue<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btnActionHandler(<span class="token punctuation">'</span>confirm<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>确定<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>以上是给取消和确定按钮添加点击事件的响应。<code>btnActionHandler</code> 这个方法统一处理了取消和确定的事件处理，在这个方法内部还调用了一个方法<code>hideCallback</code>，这个方法向父组件发送一个<code>toggleconfirm</code>的事件，并传递一个参数：false，用于隐藏组件。</p><p>添加了事件以后，现在还不能控制组件的显示与隐藏。要想控制组件的显示和隐藏，需要利用props传递进来的参数<code>isShow</code>来控制组件的显示与隐藏，此时需要在组件最外层的<code>&lt;section class=&quot;confirm-pop-container&quot;&gt;&lt;/section&gt;</code>这个标签上添加<code>v-show</code>或者<code>v-if</code>属性，代码如下：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>confirm-pop-container<span class="token punctuation">"</span></span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isShow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>除了以上设置外外，还需要将页面中的元素修改成js中对应的变量，比如：<code>标题</code>的位置需要修改成用<code>&#123;&#123;title&#125;&#125;</code>，此时html代码应该如下所示：</p><iframe width="100%" height="300" src="//jsfiddle.net/Michael_Gong/oznqcz6p/22/embedded/html/" allowfullscreen="allowfullscreen" frameborder="0"></iframe><p>这个时候一个<code>.vue</code>文件形式的组件已经创建好了，接下来就可以使用该组件了。</p><h3><span id="5-zai-qi-ta-zu-jian-zhong-yin-yong-confirm-zu-jian">5、在其他组件中引用Confirm组件</span><a href="#5-zai-qi-ta-zu-jian-zhong-yin-yong-confirm-zu-jian" class="header-anchor">#</a></h3><p>引用的方式很简单，首先需要在需要使用的组件内引入confirm组件，然后在组件中的<code>components</code>添加confirm组件，最后需在html中引入confirm组件，并传入相应参数，例如：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> confirm <span class="token keyword">from</span> <span class="token string">'./confirm.vue'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'example'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    confirmShow<span class="token punctuation">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>    confirm  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">toggleConfirm</span><span class="token punctuation">(</span>isShow<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 接收confirm组件传递上来的参数</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>confirmShow <span class="token operator">=</span> isShow<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码是将confirm中引入进去js中，然后在html中如下调用：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>confirm</span>   <span class="token attr-name">:isShow</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>confirmShow<span class="token punctuation">"</span></span>   <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>标题<span class="token punctuation">"</span></span>   <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>提示内容<span class="token punctuation">"</span></span>   <span class="token attr-name">@toggleconfirm</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>toggleConfirm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>confirm</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样这个confirm组件就可以正常调用了。</p><h2><span id="gei-zu-jian-tian-jia-dong-hua">给组件添加动画</span><a href="#gei-zu-jian-tian-jia-dong-hua" class="header-anchor">#</a></h2><p>以上的代码已经可以正常使用了，现在我们希望我们的组件有点动效，就需要给我们的组件添加一些动画效果，我们可以利用vue中的<code>transition</code>来让我们的组件动起来。</p><p><code>transition</code>详细用法请看<a href="https://cn.vuejs.org/v2/guide/transitions.html" target="_blank" rel="noopener">官网</a></p><p>首先制定一下我们想要的动画效果：<br>1、背景图渐隐出现，渐隐消失，这个效果利用opacity实现<br>2、主体内容出现的时候从小变大，消失的时候从大变小，这个效果利用transform中的scale实现</p><p>我们将主要利用transition中的两个api：<code>v-enter-active</code>、<code>v-leave-active</code>。<br>利用以上两个api需要添加的样式如下：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.confirm-ani-enter-active</span>, <span class="token class">.confirm-ani-leave-active</span> </span><span class="token punctuation">{</span>    <span class="token selector">transition: all <span class="token class">.2s</span>;    <span class="token class">.confirm-pop-main</span> </span><span class="token punctuation">{</span>        <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-<span class="token number">50%</span>, -<span class="token number">50%</span><span class="token punctuation">)</span> <span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">0.7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> // <span class="token function">translate</span><span class="token punctuation">(</span>-<span class="token number">50%</span>, -<span class="token number">50%</span><span class="token punctuation">)</span> 是为了保证居中状态    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.confirm-pop-bg</span> </span><span class="token punctuation">{</span>        <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此外还需要给<code>.confirm-pop-bg</code>和<code>.confirm-pop-main</code>添加css属性：<code>transition: all .2s</code>，这样你的组件就可以动起来了。</p><h2><span id="xiao-guo-yan-shi">效果演示</span><a href="#xiao-guo-yan-shi" class="header-anchor">#</a></h2><p>以下是我在jsfiddle中做的效果，由于jsfiddle中并不能直接写<code>.vue</code>组件，所以这种形式和以上介绍的方式还是有所区别的，比如html模板的形式、命名的形式等等都存在差别，请注意差别。</p><iframe width="500" height="500" src="//jsfiddle.net/Michael_Gong/11b3dk44/14/embedded/html,css,js,result/" allowfullscreen="allowfullscreen" frameborder="0"></iframe><h2><span id="qi-ta-si-kao">其他思考</span><a href="#qi-ta-si-kao" class="header-anchor">#</a></h2><p>在实际项目开发中，像confirm、toast、loading这样的组件，我们可能在各个组件中都会用到，如果按照上述写法，就需要在每个需要用的到组件中都添加该组件的引用，这种方法难免有点麻烦，并且代码有些冗余。</p><p>那么，采用什么方式比较好呢？<br>以下说下我知道的两种实现方式：</p><blockquote><ul><li>1、在最顶级组件中引入该组件，搭配vuex的属性来控制组件的状态</li><li>2、制作成单独的组件，利用js方法调用来控制组件的状态。</li></ul></blockquote><p>第一种方法，确实可以实现，有些时候在我们的项目中也确实会存在这样的情况（虽然不是很推荐这种写法），个人不是很推荐使用，虽然能够解决问题，但是却要总是依赖于vuex，代码并不优雅。</p><p>那么就只是剩下第二种方式了，以上的描述方式可能并不是很清晰，那么我就来一步一步的实现它。</p><p>依然按照<code>.vue</code>文件的形式进行开发。<br>首先将之前的创建好的<code>confirm.vue</code>文件,拷贝到<code>confirm</code>文件夹下（confirm文件夹请自行创建），并在这个目录下创建一个<code>confirm.js</code>的文件。此时的目录结构应该是这样的：</p><p>├── confirm<br>|   ├── confirm.vue<br>|   └── confirm.js</p><p>在confirm.js中加入如下代码：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">const</span> Confirm <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./confirm.vue'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 声明一个Confirm组件，一下操作的就是这个Confirm组件</span><span class="token keyword">let</span> instance<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Confirm组件的一个实例</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token function">show</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 显示的方法，options可以是组件中的属性或方法</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>instance<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 首先判断instancs是否为真，如果不为真，表示组件并没有实例化过，就需要实例化</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Confirm</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 初始化confirm组件</span>                el<span class="token punctuation">:</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance<span class="token punctuation">.</span>isShow<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 如果组件已经是显示状态，那么不在向下执行代码</span>        instance<span class="token punctuation">.</span>isShow <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将组件的状态修改成显示</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> prop <span class="token keyword">in</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 遍历传进来的属性，修改组件的属性值</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                instance<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> options<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        instance<span class="token punctuation">.</span>hideCallback <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">callback</span><span class="token punctuation">(</span>isShow<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 声明组件的隐藏的回调方法，这里声明了，组件内部的那个hideCallback方法就可以去掉了</span>            instance<span class="token punctuation">.</span>isShow <span class="token operator">=</span> isShow<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>$el<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将组件添加到页面中去</span>        Vue<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 在下一帧时显示组件</span>            instance<span class="token punctuation">.</span>isShow <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 关闭组件</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>            instance<span class="token punctuation">.</span>isShow <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上方法有两点需要注意的：<br>1、<code>confirm.vue</code>中的 <code>hideCallback</code> 方法可以移除掉了，而是在<code>confirm.js</code>中声明了该方法，而且这个方法的行为也发生了变化，不在向父组件发送通知，而是修改了组件的<code>isShow</code>属性<br>2、当前这个组件有且仅有一个实例，在任何地方调用的都是操作的同一个实例。更进阶的方式是，做一个confirm栈，没初始化一个confirm实例都向栈中添加一个实例，隐藏时则将改实例移除出栈。栈是用来控制其显示顺序的，用户看到的永远是栈顶的组件，当栈顶的组件被隐藏后就将该组件移除出栈，接着显示下一个组件。</p><p>组件创建完成之后，还需要将组件添加到<code>Vue</code>实例中，方便我们调用：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> confirm <span class="token keyword">from</span> <span class="token string">'./confirm/confirm.js'</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span>$confirm <span class="token operator">=</span> Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$confirm <span class="token operator">=</span> Confirm<span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span><span class="token string">'#app'</span>  <span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中最关键的一句就是：<code>Vue.$confirm = Vue.prototype.$confirm = Confirm;</code>，将confirm组件绑定到Vue上。</p><p>这样我们在组件中就可以直接像这样调用：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 显示</span><span class="token keyword">this</span><span class="token punctuation">.</span>$confirm<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    content<span class="token punctuation">:</span> <span class="token string">'显示内容'</span><span class="token punctuation">,</span>    cancelText<span class="token punctuation">:</span> <span class="token string">'取消'</span><span class="token punctuation">,</span>    cancelFunc<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    confirmText<span class="token punctuation">:</span> <span class="token string">'删除'</span><span class="token punctuation">,</span>    confirmFunc<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 关闭</span><span class="token keyword">this</span><span class="token punctuation">.</span>$confirm<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样我们的Confirm组件就完成了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;toc&quot;&gt;

&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#shi-me-shi-zu-jian&quot;&gt;什么是组件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#vue-zu-jian&quot;&gt;Vue组件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=
      
    
    </summary>
    
      <category term="vue" scheme="http://happybug.top/categories/vue/"/>
    
      <category term="前端" scheme="http://happybug.top/categories/vue/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="vue" scheme="http://happybug.top/tags/vue/"/>
    
      <category term="组件" scheme="http://happybug.top/tags/%E7%BB%84%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>前端琐碎知识点整理</title>
    <link href="http://happybug.top/2017/09/15/knowledge/"/>
    <id>http://happybug.top/2017/09/15/knowledge/</id>
    <published>2017-09-15T10:52:18.000Z</published>
    <updated>2019-04-06T05:43:20.766Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#ios-xi-tong-dui-yyyy-mm-dd-hh-mm-ss-shi-jian-ge-shi-bu-jian-rong">ios系统对yyyy-mm-dd hh:mm:ss时间格式不兼容</a></li><li><a href="#flex-zai-hua-wei-shou-ji-zhong-de-jian-rong-xing">flex在华为手机中的兼容性</a></li><li><a href="#js-pan-duan-shi-fou-shi-shu-zu">js判断是否是数组</a></li><li><a href="#css-kong-zhi-yong-hu-wu-fa-xuan-ze-nei-rong">CSS控制用户无法选择内容</a></li><li><a href="#css-she-zhi-dian-ji-mou-ge-yuan-su-shi-gao-liang">CSS设置点击某个元素时高亮</a></li><li><a href="#css-jin-yong-xi-tong-mo-ren-chu-li-de-gong-neng">CSS禁用系统默认处理的功能</a></li><li><a href="#css3-xuan-ze-qi-target">CSS3选择器 <code>:target</code></a></li><li><a href="#yi-dong-duan-shu-ru-kuang-zi-dong-huo-qu-jiao-dian-wen-ti">移动端输入框自动获取焦点问题</a></li><li><a href="#yi-dong-duan-jian-pan-you-xia-jiao-wen-zi-she-zhi">移动端键盘右下角文字设置</a></li><li><a href="#localstorage-zai-wu-hen-mo-shi-xia-bei-jin-yong-de-wen-ti">localStorage在无痕模式下被禁用的问题</a></li><li><a href="#scss-zhong-calc-zhong-bu-neng-chu-li-bian-liang-de-wen-ti">SCSS中calc中不能处理变量的问题</a></li><li><a href="#cors-xiang-guan">CORS相关</a></li><li><a href="#withcredentials">withCredentials</a></li><li><a href="#npm-config-bei-wang">npm config (备忘)</a></li><li><a href="#git-xiu-gai-gitignore-wen-jian-hou-huan-cun-wen-ti">git 修改.gitignore文件后缓存问题</a></li></ul><!-- tocstop --><p></div></p><h2><span id="ios-xi-tong-dui-yyyy-mm-dd-hh-mm-ss-shi-jian-ge-shi-bu-jian-rong">ios系统对yyyy-mm-dd hh:mm:ss时间格式不兼容</span><a href="#ios-xi-tong-dui-yyyy-mm-dd-hh-mm-ss-shi-jian-ge-shi-bu-jian-rong" class="header-anchor">#</a></h2><p>ios系统(主要safari浏览器)对yyyy-mm-dd hh:mm:ss格式的时间不兼容</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">'2019-03-01 17:55:24'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对于以上结果会返回 <code>null</code>,所以需要针对这种情况进行特殊处理，将’-‘变成’/‘ 即可，形如：yyyy/mm/dd hh:mm:ss，代码如下：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\-/g</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2><span id="flex-zai-hua-wei-shou-ji-zhong-de-jian-rong-xing">flex在华为手机中的兼容性</span><a href="#flex-zai-hua-wei-shou-ji-zhong-de-jian-rong-xing" class="header-anchor">#</a></h2><p>只能说华为系统是个神奇的系统，正常来讲在华为手机上flex也是可以使用的，但是如果你使用了<code>flex:1</code>的话，很有可能出现布局问题，这个时候需要添加width:0属性。如果你的标签是行内元素的话，可能还需要给元素添加display:block属性</p><h2><span id="js-pan-duan-shi-fou-shi-shu-zu">js判断是否是数组</span><a href="#js-pan-duan-shi-fou-shi-shu-zu" class="header-anchor">#</a></h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">isArrayFn</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> Array<span class="token punctuation">.</span>isArray <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// ES6语法</span>        <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object Array]'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="css-kong-zhi-yong-hu-wu-fa-xuan-ze-nei-rong">CSS控制用户无法选择内容</span><a href="#css-kong-zhi-yong-hu-wu-fa-xuan-ze-nei-rong" class="header-anchor">#</a></h2><pre class="line-numbers language-css"><code class="language-css"><span class="token property">-webkit-user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token property">-moz-user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token property">-ms-user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token property">user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>移动端基本全都兼容，<a href="http://caniuse.com/#feat=user-select-none" target="_blank" rel="noopener">兼容性</a></p><h2><span id="css-she-zhi-dian-ji-mou-ge-yuan-su-shi-gao-liang">CSS设置点击某个元素时高亮</span><a href="#css-she-zhi-dian-ji-mou-ge-yuan-su-shi-gao-liang" class="header-anchor">#</a></h2><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">a </span><span class="token punctuation">{</span>    <span class="token property">-webkit-tap-highlight-color</span><span class="token punctuation">:</span><span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>详情可以点<a href="http://www.css88.com/webkit/-webkit-tap-highlight-color/" target="_blank" rel="noopener">这里</a></p><h2><span id="css-jin-yong-xi-tong-mo-ren-chu-li-de-gong-neng">CSS禁用系统默认处理的功能</span><a href="#css-jin-yong-xi-tong-mo-ren-chu-li-de-gong-neng" class="header-anchor">#</a></h2><p>-webkit-touch-callout<br>是否禁用系统默认处理的功能，例如：链接元素比如新窗口打开，img元素比如保存图像等等</p><pre class="line-numbers language-css"><code class="language-css"><span class="token property">-webkit-touch-callout</span><span class="token punctuation">:</span> 属性none： 系统默认菜单被禁用inherit：系统默认菜单不被禁用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>详情请点<a href="http://www.css88.com/webkit/-webkit-touch-callout/" target="_blank" rel="noopener">这里</a></p><h2><span id="css3-xuan-ze-qi-target">CSS3选择器 <code>:target</code></span><a href="#css3-xuan-ze-qi-target" class="header-anchor">#</a></h2><p>很惭愧，这个属性的用法是最近才知道的。<br>之前有同事问过我一个问题：浏览器锚点（就是url中带有#id这种形式的）怎么让页面上方空出一块距离。当时我的回答是：好像不行吧，除非用js来控制。显然这回答是不正确的，我们利用<code>:target</code>选择器可以做到这一点，例如本站的锚点。<br>假设你有需要锚点的div如下：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>target<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这里是锚点<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>那么你的css可以这样写：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token id">#target</span><span class="token pseudo-class">:target</span> </span><span class="token punctuation">{</span>    <span class="token property">padding-top</span><span class="token punctuation">:</span> <span class="token number">80</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>padding或者使用margin看你页面的实际需求，这是只是举个例子，这样你的锚点就角距离页面顶部80px了。</p><h2><span id="yi-dong-duan-shu-ru-kuang-zi-dong-huo-qu-jiao-dian-wen-ti">移动端输入框自动获取焦点问题</span><a href="#yi-dong-duan-shu-ru-kuang-zi-dong-huo-qu-jiao-dian-wen-ti" class="header-anchor">#</a></h2><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">autofocus</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>autofocus<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由于移动端的限制，尤其是iphone手机，如果你想要在进入页面之后没有任何交互行为的情况下出发输入框自动获取焦点，这基本是不可能的。所以这个属性起作用的重要前提是: 在自动获取焦点之前页面上有与用户的交互行为，比如点击按钮等等。</p><h2><span id="yi-dong-duan-jian-pan-you-xia-jiao-wen-zi-she-zhi">移动端键盘右下角文字设置</span><a href="#yi-dong-duan-jian-pan-you-xia-jiao-wen-zi-she-zhi" class="header-anchor">#</a></h2><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果你的input没有被form包住的话，那么键盘右下角将显示 <code>换行</code> 字样，添加了form并且有action的话，就会显示<code>前往</code>或<code>GO</code>字样。 </p><p>如果希望按钮上显示 <code>搜索</code>的话，那么input的type值应为<code>search</code></p><h2><span id="localstorage-zai-wu-hen-mo-shi-xia-bei-jin-yong-de-wen-ti">localStorage在无痕模式下被禁用的问题</span><a href="#localstorage-zai-wu-hen-mo-shi-xia-bei-jin-yong-de-wen-ti" class="header-anchor">#</a></h2><p>在很多浏览器中开启了无痕模式后，localstorage无法使用了，建议在使用前可以做下localStorage的测试：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">testLocalStorage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'testLocalStorage'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">'testLocalStorage'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="scss-zhong-calc-zhong-bu-neng-chu-li-bian-liang-de-wen-ti">SCSS中calc中不能处理变量的问题</span><a href="#scss-zhong-calc-zhong-bu-neng-chu-li-bian-liang-de-wen-ti" class="header-anchor">#</a></h2><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">div </span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token number">100%</span> - $footerHeight<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>以上场景在scss中不能正常处理<code>$footerHeight</code>这个变量，如果需要在scss中使用变量的话需要将变量用<code>#{$variable}</code> 包裹一下，如下：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">div </span><span class="token punctuation">{</span>    <span class="token selector">height: calc(100% - #</span><span class="token punctuation">{</span>$footerHeight<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2><span id="cors-xiang-guan">CORS相关</span><a href="#cors-xiang-guan" class="header-anchor">#</a></h2><p>preflight(预检请求，即Options请求的发送)的发送原则：<br>1、使用了以下任意HTTP方法：<code>PUT、DELETE、CONNECT、OPTIONS、TRACE、PATCH</code><br>2、人为设置了<code>CORS安全首部字段集合</code>之外的其他首部，该集合为：<br>    <code>Accept、Accept-Language、Content-Language、Content-Type、DPR、Downlink、Save-Data、Viewport-Width、Width</code><br>其中Content-Type要满足下文的条件<br>3、Content-Type的值不属于下列之一：<br>    application/x-www-form-urlencoded<br>    multipart/form-data<br>    text/plain<br>4、请求中的XMLHttpRequestUpload 对象注册了任意多个事件监听器<br>5、请求中使用了ReadableStream对象。</p><p>以上各项的相反就是简单请求。<br>参考：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS</a></p><h2><span id="withcredentials">withCredentials</span><a href="#withcredentials" class="header-anchor">#</a></h2><p>如果你在a域发送了b域的请求，且b域设置了cookie信息，那么在a域会以b域的形式存储一份cookie，如果没有设定withCredentials或是credentials: ‘include’的话，就算服务器传了set-cookie也不会被写入。</p><p>在你请求b域的接口时，如果不设置withCredentials为true的话，请求依然会被跨域限制，而且此时服务器的返回头不能是<code>Access-Control-Allow-Origin: *</code> 必须指定相应的域名才行。</p><h2><span id="npm-config-bei-wang">npm config (备忘)</span><a href="#npm-config-bei-wang" class="header-anchor">#</a></h2><p>设置npm的registry</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 淘宝镜像</span><span class="token function">npm</span> config <span class="token keyword">set</span> registry https://registry.npm.taobao.org/<span class="token comment" spellcheck="true"># 默认npm镜像</span><span class="token function">npm</span> config <span class="token keyword">set</span> registry<span class="token operator">=</span>http://registry.npmjs.org<span class="token comment" spellcheck="true"># 当前登录的npm账号（注意要切换到默认npm镜像）</span><span class="token function">npm</span> <span class="token function">whoami</span><span class="token comment" spellcheck="true"># 登录npm</span><span class="token function">npm</span> login<span class="token comment" spellcheck="true"># 发布npm</span><span class="token function">npm</span> publish <span class="token keyword">.</span><span class="token comment" spellcheck="true"># 更新版本</span><span class="token function">npm</span> version 0.1.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>npm README 不更新的解决方法：<a href="https://github.com/npm/registry/issues/42#issuecomment-243428303" target="_blank" rel="noopener">https://github.com/npm/registry/issues/42#issuecomment-243428303</a></p><h2><span id="git-xiu-gai-gitignore-wen-jian-hou-huan-cun-wen-ti">git 修改.gitignore文件后缓存问题</span><a href="#git-xiu-gai-gitignore-wen-jian-hou-huan-cun-wen-ti" class="header-anchor">#</a></h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">rm</span> -r --cached <span class="token keyword">.</span><span class="token function">git</span> add <span class="token keyword">.</span><span class="token function">git</span> commit -m <span class="token string">'update .gitignore'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;toc&quot;&gt;

&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#ios-xi-tong-dui-yyyy-mm-dd-hh-mm-ss-shi-jian-ge-shi-bu-jian-rong&quot;&gt;ios系统对yyyy-mm-dd hh:mm:
      
    
    </summary>
    
      <category term="前端" scheme="http://happybug.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="flex" scheme="http://happybug.top/categories/%E5%89%8D%E7%AB%AF/flex/"/>
    
      <category term="知识点" scheme="http://happybug.top/categories/%E5%89%8D%E7%AB%AF/flex/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="flex" scheme="http://happybug.top/tags/flex/"/>
    
      <category term="兼容性" scheme="http://happybug.top/tags/%E5%85%BC%E5%AE%B9%E6%80%A7/"/>
    
      <category term="华为" scheme="http://happybug.top/tags/%E5%8D%8E%E4%B8%BA/"/>
    
  </entry>
  
</feed>
